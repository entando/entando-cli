#!/bin/bash

# FLAGS
#H:% OPTPAR CHAINED SHORTS

# HELP HEADER
#H::
#H:: Helper for managing the first generation of Entando bundle projects
#H::
#H:: Syntax:
#H::  - {{TOOL-NAME}} {sub-command}
#H::
#H:: SubCommands:

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
cd "$DIR/../.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RUN() {
  reload_cfg "$C_ENT_PRJ_FILE"
  reload_cfg "$C_ENT_STATE_FILE"

  while true; do
    cmd="$1"
    shift
    case "$cmd" in
    # ~~~~~~~~~~~~~~~~~~~~
    #H:> GLOBAL:
    # ~~~~~~~~~~~~~~~~~~~~
    "init") #H: initializes a project dir
      bgn_help_parsing ":ent-prj" "$@"
      args_or_ask -h "$HH" -n -F -- FROM_HUB '--from-hub///Initializes a bundle project from the Entando Hub' "$@"
      end_help_parsing
      
      if "$FROM_HUB"; then
        ENTANDO_BUNDLE_CLI_INIT_SUPPRESS_NO_ENTANDO_JSON_WARNING=true ent bundle init "$@"
      else
        require_develop_checked
        print_entando_banner
        init_project
      fi
      ;;
    "build" | "ba") #H: builds both frontend and backend
      simple_help_handler "parse_be_arguments" "$@" && return 0
      require_develop_checked
      require_ent_project_dir
      print_entando_banner
      _log_i "Building the frontend"
      fe_build -a || _SOE
      _log_i "Building the backend"
      be_build "$@" || _SOE
      _log_i "Collecting the bundle artifacts"
      bundle_all
      ;;
    "generate-cr" | "cr") #H: generates the CUSTOM RESOURCE for registering the bundle into the entando instance
      require_develop_checked
      prj_generate_custom_resource "$@"
      ;;
    "deploy") #H: generates the CR and deploys it to the current profile
      kube.utils.is_api_server_reachable || _FATAL -s "Unable to connect to the Entando application"
      require_develop_checked
      require_ent_project_dir
      prj_ecr_deploy "$@"
      ;;
    "install") #H: installs the current project bundle
      HH="$(parse_help_option "$@")"
      show_help_option "$HH"
      local VERSION_TO_INSTALL CONFLICT_STRATEGY TENANT_CODE
      args_or_ask -n ${HH:+"$HH"} VERSION_TO_INSTALL '--version/ver//defines the specific version to install' "$@"
      args_or_ask -n ${HH:+"$HH"} CONFLICT_STRATEGY \
        '--conflict-strategy///strategy to adopt if the object is already present (CREATE|SKIP|OVERRIDE)' "$@"
      [ -n "$HH" ] && return 0
      args_or_ask -h "$HH" -n TENANT_CODE '--tenant///the tenant code' "$@" || {
        TENANT_CODE="primary"
      }
      require_develop_checked
      require_ent_project_dir
      ecr.install-bundle "$ENT_PRJ_NAME" "$VERSION_TO_INSTALL" "$CONFLICT_STRATEGY" "$TENANT_CODE"
      ;;
    "uninstall") #H: uninstalls the current project bundle
      HH="$(parse_help_option "$@")"
      args_or_ask ${HH:+"$HH"} -n -F "ENTANDO_OPT_YES_FOR_ALL" "--yes///Assumes yes for all yes-no questions" "$@"
      args_or_ask ${HH:+"$HH"} -n -F "PURGE_VOLUMES" "--volumes///Also deletes the volumes" "$@"
      args_or_ask -n -F ${HH:+"$HH"} "BE_PURGE" \
        '--purge-be///also purge the backend' "$@"
      args_or_ask -n -F ${HH:+"$HH"} "ECR_UNDEPLOY" \
        '--undeploy///also unregister the bundle from the ECR registry' "$@"
      [ -n "$HH" ] && return 0
      args_or_ask -n -p -F ${HH:+"$HH"} "BE_PURGE" \
        '--be-purge///also purge the backend' "$@"
      args_or_ask -n -F ${HH:+"$HH"} "DRY_RUN" '--dry///only shows what needs to be deleted' "$@"
      args_or_ask -n -F ${HH:+"$HH"} "FORCE" '--force///forces the deletion of protected resources' "$@"

      require_develop_checked
      require_ent_project_dir
      prj_ecr_uninstall "$@"
      $BE_PURGE && be_purge_k8s
      $ECR_UNDEPLOY && prj_ecr_unregister_bundle
      ;;
    # ~~~~~~~~~~~~~~~~~~~~
    #H:> PUB SYSTEM:
    # ~~~~~~~~~~~~~~~~~~~~
    "pbs-init") #H: (url, username, email) initializes the publication system
      bgn_help_parsing ":PRJ-PBS-INIT" "$@"
      args_or_ask -a -h "$HH-only" URL_OF_ORIGIN "1/git_repo//%sp URL of the publication repository" "$@" 
      args_or_ask -a -h "$HH-only" GIT_USER_NAME "2/ext_ic_id_spc/$GIT_USER_NAME/%sp git user name" "$@"
      args_or_ask -a -h "$HH-only" GIT_USER_EMAIL "3/email/$GIT_USER_EMAIL/%sp git email" "$@"
      args_or_ask -n -F -h "$HH-only" -- "FORCE" '--force///forces the initialization' "$@" && {
        _log_i "pub_init: Force mode active"
      }
      end_help_parsing

      require_develop_checked
      #require_initialized_dir
      print_entando_banner
      init_pub "$@"
      ;;
    "pbs-publish" | "pub") #H: [--force] (VERSION_NUMBER, VERSION_COMMENT) bumps and publishes a new version
      require_develop_checked
      #require_ent_project_dir
      publish_version "$@"
      ;;
    # ~~~~~~~~~~~~~~~~~~~~
    #H:> FRONTEND:
    # ~~~~~~~~~~~~~~~~~~~~
    "fe-build" | "fb") #H: [--all|-a] builds and package the frontend
      require_develop_checked
      require_ent_project_dir
      print_entando_banner
      node.activate_environment
      fe_build "$@"
      bundle_all
      ;;
    "fe-push" | "fp") #H: [--force] pushes the frontend to the repo
      require_develop_checked
      require_ent_project_dir
      node.activate_environment
      fe_push "$@"
      ;;
    "fe-test-run" | "fr") #H: runs the one of the frontend components
      require_develop_checked
      require_ent_project_dir
      node.activate_environment
      fe_test_run "$@"
      ;;
    "fe-list" | "fls") #H: lists the frontend components
      require_develop_checked
      require_ent_project_dir
      fe_list_widgets
      ;;
    # ~~~~~~~~~~~~~~~~~~~~
    #H:> BACKEND:
    # ~~~~~~~~~~~~~~~~~~~~
    "be-build" | "bb") #H: (mvn-params) builds and packages the backend
      simple_help_handler "parse_be_arguments" "$@" && return 0
      
      require_develop_checked
      require_ent_project_dir
      be_build "$@" || _SOE
      bundle_all
      ;;
    "be-list-pods" | "blp") #H: list the pods related to this bundle project
      require_develop_checked
      require_ent_project_dir
      be_list_pods
      ;;
    "be-update-deployment" | "brp") #H: updates the deployment related to this bundle
      require_develop_checked
      require_ent_project_dir
      be_restart_pods 0
      ;;
    "be-purge") #H: purges all the backend kubernetes resoources related to this bundle
      HH="$(parse_help_option "$@")"
      show_help_option "$HH"
      args_or_ask ${HH:+"$HH"} -n -F "ENTANDO_OPT_YES_FOR_ALL" "--yes///Assumes yes for all yes-no questions" "$@"
      args_or_ask ${HH:+"$HH"} -n -F "PURGE_VOLUMES" "--volumes///Also deletes the volumes" "$@"
      args_or_ask -n -F ${HH:+"$HH"} "DRY_RUN" '--dry///only shows what needs to be deleted' "$@"
      [ -n "$HH" ] && return 0

      require_develop_checked
      require_ent_project_dir
      be_purge_k8s
      ;;
    "be-info") #H: prints information about the backend
      require_ent_project_dir
      be_info
      ;;
    "be-push" | "bp") #H: pushes the backend to the images registry
      HH="$(parse_help_option "$@")"
      show_help_option "$HH"
      local restart_pods_after
      args_or_ask -n -f ${HH:+"$HH"} \
        '--update-deployment///restarts the pods related to this bundle project' "$@" && {
        restart_pods_after=3
      }
      args_or_ask -n -p ${HH:+"$HH"} "restart_pods_after" \
        '--update-deployment-after/num//restarts the pods related to this bundle project' "$@"
      [ -n "$HH" ] && return 0

      require_ent_project_dir
      be_push

      [ -n "$restart_pods_after" ] && {
        be_restart_pods "$restart_pods_after"
      }
      ;;
    "be-test-run" | "br") #H: locally executes the backend
      require_ent_project_dir
      be_test_run
      ;;
    "be-logs" | "be-log" | "bl") #H: shows the logs of the bundle pod
      require_ent_project_dir
      be_pod_action "log" "$@"
      ;;
    "be-describe" | "bd") #H: shows the logs of the bundle pod
      require_ent_project_dir
      be_pod_action "describe"
      ;;
    # ~~~~~~~~~~~~~~~~~~~~
    #H:> UTILS:
    # ~~~~~~~~~~~~~~~~~~~~
    "get-bundle-id"|"bid") #H: calculates and displays the bundle id
      prj_print_bundle_id "$@"
      ;;
    "get-plugin-id"|"pid") #H: calculates and displays the plugin id
      _log_i "Deprecated, please use get-plugin-code" 1>&2
      prj_print_plugin_code "$@"
      ;;
    "get-plugin-code"|"plc") #H: calculates and displays the plugin id
      prj_print_plugin_code "$@"
      ;;
    "gen-secret"|"sec") #H: generates and displays a plugin secret skeleton
      prj_gen_secret "$@"
      ;;
    # ~~~~~~~~~~~~~~~~~~~~
    #H:> EXTERNALS:
    # ~~~~~~~~~~~~~~~~~~~~
    "ext-keycloak" | "xk") #H: manage the tests keycloak instance
      require_ent_project_dir
      ext_keycloak "$@"
      ;;
    *)
      print_ent_module_help "${BASH_SOURCE[0]}" "$2"
      break
      ;;
    esac
    index_of_arg "--AND" "$@"
    if [ $? -eq 255 ]; then shift $#; else shift $?; fi
    [ -z "$1" ] && break
  done
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
prj_gen_secret() {
  bgn_help_parsing ":ENT-ECR-GET-PLUGIN-ID" "$@"
  args_or_ask -h "$HH" -a SEC_NAME "1/ext_ic_id//%sp the bundle secret name" "$@"
  args_or_ask -h "$HH" -n -F -- AUTO_PLUGIN_NAME '--auto///%sp tries to derive part of the required information from the repo' "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_ID "--bundle-id/ext_ic_id//%sp the bundle id" "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_PUB_REPO '--repo/url//%sp bundle publication repository URL' "$@"
  args_or_ask -h "$HH" -F -- EDIT '--edit///%sp edit before printing' "$@"
  args_or_ask -h "$HH" -n -- SAVE_TO '--save///%sp saves to the given file instead of printing' "$@"
  args_or_ask -h "$HH" -F -- APPLY '--apply///%sp applies to the current kube instead of printing' "$@"
  
  end_help_parsing

  _nn SAVE_TO && assert_strict_file_name "SAVE_TO" "$SAVE_TO" fatal
  
  _nn BUNDLE_ID || {
    _nn BUNDLE_PUB_REPO "$(get_bundle_repo_url)" || _FATAL "Unable to determine the publication repo url"
    ecr.calculate-bundle-id BUNDLE_ID "$BUNDLE_PUB_REPO"
  }
  
  ecr.generate-and-print-secret "$SEC_NAME" "$BUNDLE_ID" "$EDIT" "$SAVE_TO" "$APPLY"
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
prj_print_plugin_code() {
  local PLUGIN_NAME BUNDLE_PUB_REPO

  bgn_help_parsing ":ENT-PRJ-GET-PLUGIN-ID" "$@"
  args_or_ask -h "$HH" -a -n -- PLUGIN_NAME '1/ext_ic_id//%sp the plugin base name' "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_ID "--bundle-id/ext_ic_id//%sp the bundle id" "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_PUB_REPO '--repo/url//%sp bundle publication repository URL' "$@"
  args_or_ask -h "$HH" -n -F -- AUTO_PLUGIN_NAME '--auto///%sp derives the plugin name from the bundle dir contents' "$@"
  end_help_parsing

  require_ent_project_dir
  require_pbs_initialized

  if $AUTO_PLUGIN_NAME && [ -z "$PLUGIN_NAME" ]; then
    _ecr_determine_git_bundle_plugin_name PLUGIN_NAME "." "" 
  fi

  _nn BUNDLE_ID || {
    _nn BUNDLE_PUB_REPO "$(get_bundle_repo_url)" || _FATAL "Unable to determine the publication repo url"
    ecr.calculate-bundle-id BUNDLE_ID "$BUNDLE_PUB_REPO"
  }
  local RES
  NONNULL -s PLUGIN_NAME BUNDLE_ID
  ecr.calculate-plugin-code RES "$PLUGIN_NAME" "$BUNDLE_ID"
  echo "$RES"
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
prj_print_bundle_id() {
  local NAME REPOSITORY THUMBNAIL_FILE THUMBNAIL_URL

  bgn_help_parsing ":ENT-ECR-GET-BUNDLE-ID" "$@"
  args_or_ask -h "$HH" -n -p REPOSITORY '--repo///url of the publication repository' "$@"
  args_or_ask -h "$HH" -n -F -- VERBOSE '--verbose/url//prints to the stderr additional info' "$@"
  $HH_HELP_REQUEST && echo -e "\n> Notes:\n  - all arguments are optional\n"
  end_help_parsing
  
  require_ent_project_dir
  require_pbs_initialized
  
  _nn REPOSITORY "$(get_bundle_repo_url)" || _FATAL "Unable to determine the publication repo url"

  local RES
  ecr.calculate-bundle-id RES "$REPOSITORY"
  echo "$RES"
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ext_keycloak() {
  cmd="$1"
  shift
  case "$cmd" in
  start | up | u)
    docker-compose -f src/main/docker/keycloak.yml up -d "$@"
    ;;
  stop | down | d)
    docker-compose -f src/main/docker/keycloak.yml down "$@"
    ;;
  logs | l)
    docker-compose -f src/main/docker/keycloak.yml logs "$@"
    ;;
  *)
    _log_w "Please provide a valid action: start|stop|logs"
    ;;
  esac
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~

prj_ecr_uninstall() {
  local INGRESS_URL TOKEN
  ecr-prepare-action INGRESS_URL TOKEN
  _log_i "Uninstallation of bundle \"$ENT_PRJ_NAME\" started"
  ecr-bundle-action "" "POST" "uninstall" "$INGRESS_URL" "$TOKEN" "$ENT_PRJ_NAME" &>/dev/null || return $?
  ecr-watch-installation-result "uninstall" "$INGRESS_URL" "$TOKEN" "$ENT_PRJ_NAME"
}

prj_ecr_deploy() {
  print_current_profile_info
  ent prj cr "$@" | _kubectl apply -f -
}

prj_ecr_unregister_bundle() {
  local pn="$ENT_PRJ_NAME"
  _kubectl delete EntandoDeBundle "$pn"
}

prj_generate_custom_resource() {
  local NAME REPOSITORY THUMBNAIL_FILE THUMBNAIL_URL

  bgn_help_parsing ":PRJ-CR" "$@"
  args_or_ask -n -p -h "$HH" NAME '--name///name of the bundle project' "$@"
  args_or_ask -n -p -h "$HH" REPOSITORY '--repo///url of the publication repository' "$@"
  args_or_ask -n -p -h "$HH" THUMBNAIL_FILE "--thumbnail-file///pathname of the thumbnail" "$@"
  args_or_ask -n -p -h "$HH" THUMBNAIL_URL "--thumbnail-url///url of the thumbnail" "$@"
  $HH_HELP_REQUEST && echo -e "\n> Notes:\n  - all arguments are optional\n"
  end_help_parsing
  
  require_ent_project_dir
  require_pbs_initialized
  
  _nn NAME "$ENT_PRJ_NAME"
  _nn NAME && camel_to_snake -d NAME "$(basename "$PWD")"
  _nn REPOSITORY "$(get_bundle_repo_url)"

  ecr.generate-custom-resource "$NAME" "$REPOSITORY" "$THUMBNAIL_FILE" "$THUMBNAIL_URL"
}

bundle_all() {
  bash ./prepareBundle.sh
}

fe_build() {
  if [[ "$1" == "--all" || "$1" == "-a" ]]; then
    shift
    require_ent_project_dir
    node.activate_environment
    bash ./prepareMicrofrontends.sh
  else
    fe_select_widget "build" && (
      __cd "$SELECTED_WIDGET"
      _ent-npm install
      _ent-npm run build --production
    )
  fi
}

fe_select_widget() {
  fe_widget_do :select "$1"
}

fe_list_widgets() {
  fe_widget_do :print
}

fe_widget_do() {
  local action="$1"
  local desc="$2"
  local i=0
  declare -a arr

  while IFS= read -r widgetPackageFiles; do
    widgetDir="$(dirname "$widgetPackageFiles")"
    i=$((i + 1))
    arr[$i]="$widgetDir"
    [[ "$action" =~ :print ]] && echo "$i) $widgetDir"
  done < <(find ui/widgets/ -iname package.json -not -path "*/node_modules/*")

  [[ "$action" =~ :select ]] && {
    _log_i "Select the Widget to $desc"
    select_one "" "${arr[@]}"
    _log_i "Widget \"$select_one_res_alt\" selected"

    SELECTED_WIDGET="$select_one_res_alt"
  }
  true
}

fe_test_run() {
  fe_select_widget "run" && (
    __cd "$SELECTED_WIDGET"
    _ent-npm install && _ent-npm start
  )
}

be_test_run() {
  ./mvnw
}

get_be_artifact_id() {
  grep "<artifactId>" pom.xml | head -1 | sed 's/^.*<artifactId>\(.*\)<\/artifactId>.*$/\1/'
}

# shellcheck disable=SC2155
get_be_info() {
  if $OS_WIN; then
    local ver=$(sha256sum pom.xml | awk '{print $1}')
  else
    local ver=$(shasum -a 256 pom.xml | awk '{print $1}')
  fi
  if [ "$ver" != "$PARSED_POM_CHECKSUM" ]; then
    local IMAGE_FQNAME_expr="$(grep "<to>" pom.xml -A 5 | grep "<image>" | head -n 1 | _perl_sed 's/<image>([^<]*).*/\1/')"

    IMAGE_FQNAME="$(
      ./mvnw -q --non-recursive exec:exec \
        -Dexec.executable="echo" \
        -Dexec.args="'$IMAGE_FQNAME_expr'" 2>/dev/null | grep -v 'Warning:'
    )"
    if echo "$IMAGE_FQNAME" | grep -F "[ERROR]"; then
      IMAGE_FQNAME=""
    fi
  fi

  [ -z "$IMAGE_FQNAME" ] && {
    _log_w "Unable to determine the image name"
    PARSED_POM_CHECKSUM=""
    save_cfg_value "PARSED_POM_CHECKSUM" "" "$C_ENT_STATE_FILE"
    set_or_ask "IMAGE_FQNAME" "" "Please provide the full image name (org/name:tag)"
  }

  [ -z "$IMAGE_FQNAME" ] && _FATAL "Unable to determine the image name"
  IMAGE_FQNAME_ORG="$(echo "$IMAGE_FQNAME" | awk '{split($0,a,"/"); print a[1]}')"
  local tmp="$(echo "$IMAGE_FQNAME" | awk '{split($0,a,"/"); print a[2]}')"
  IMAGE_FQNAME_NAME="$(echo "$tmp" | awk '{split($0,a,":"); print a[1]}')"
  IMAGE_FQNAME_TAG="$(echo "$tmp" | awk '{split($0,a,":"); print a[2]}')"

  if [ -n "$IMAGE_FQNAME" ]; then
    save_cfg_value "PARSED_POM_CHECKSUM" "$ver" "$C_ENT_STATE_FILE"
    save_cfg_value "IMAGE_FQNAME" "$IMAGE_FQNAME" "$C_ENT_STATE_FILE"
  else
    save_cfg_value "PARSED_POM_CHECKSUM" "" "$C_ENT_STATE_FILE"
  fi
}

be_info() {
  get_be_info
  _log_i "Docker image info:\n\
  - IMAGE ORG:    \"$IMAGE_FQNAME_ORG\"\n\
  - IMAGE NAME:   \"$IMAGE_FQNAME_NAME\"\n\
  - IMAGE TAG:    \"$IMAGE_FQNAME_TAG\"\n\
  - IMAGE FQNAME: \"$IMAGE_FQNAME\"\n"
}

be_build() {
  require_ent_project_dir
  node.activate_environment
  
  get_be_info
  be_update_plugin_descriptor

  # shellcheck disable=SC2015
  ./mvnw \
      ${OPT_MVN_PROFILE:+-P"$OPT_MVN_PROFILE"} \
      ${OPT_CLEAN:+"$OPT_CLEAN"} \
      ${OPT_TESTS:+"$OPT_TESTS"} \
      package jib:dockerBuild && {
    echo ""
    _log_i "Built image \"$IMAGE_FQNAME\""
    true
  } || {
    _log_e "Error building image \"$IMAGE_FQNAME\""
    false
  }
}

be_update_plugin_descriptor() {
  local PLUGIN_BUNDLE_DIR
  PLUGIN_BUNDLE_DIR="$(grep -- "- plugins/.*" "bundle/$C_BUNDLE_DESCRIPTOR_FILE_NAME" | perl -pe "s|\s*- (.*)|\1|")"
  [ -z "$PLUGIN_BUNDLE_DIR" ] && FATAL "Unable to determine the plugin bundle dir"
  PLUGIN_DESCRIPTOR="bundle/$PLUGIN_BUNDLE_DIR"
  _sed_in_place "s|^\(.*\)image:.*|\1image: $IMAGE_FQNAME|" "$PLUGIN_DESCRIPTOR"
}

be_list_pods() {
  print_current_profile_info
  get_be_info
  get_pods_list "$IMAGE_FQNAME_ORG-$IMAGE_FQNAME_NAME"
}

be_restart_pods() {
  local restart_pods_after="$1"
  print_current_profile_info
  get_be_info
  local pods
  pods="$(get_pods_list "$IMAGE_FQNAME_ORG-$IMAGE_FQNAME_NAME" | grep "server-deployment" | cut -d' ' -f 1)"
  [ "${#pods}" -eq 0 ] && {
    _log_i "Restart pods was not able to find any pod in the current profile"
    return 0
  }
  _log_i "Restart pods will start in $restart_pods_after seconds"
  sleep "$restart_pods_after"
  for pod in $pods; do
    _log_i "Restarting pod: \"$pod\""
    _kubectl delete pod "$pod" >/dev/null
  done
}

be_purge_k8s() {
  print_current_profile_info
  get_be_info
  local pn="$IMAGE_FQNAME_ORG-$IMAGE_FQNAME_NAME"
  local tpn="${pn:0:31}"
  _log_i "Warning, this will delete the plugin and it resources"
  ask "Should I proceed?" || EXIT_UE "User interrupted"
  del_resource -n "EntandoPlugin" "$tpn"
  del_resource -l "deployment" "$tpn"
  del_resource -l "pod" "$tpn"
  del_resource -L "pod/lnk" "$tpn"
  del_resource -l "service" "$tpn"
  del_resource -l "ingress" "$tpn"
  del_resource -l "secret" "$tpn"
  del_resource -m "secret" "$tpn" \
    "^$pn-server-secret$" "^$pn-sidecar-secret$" "^$ENTANDO_APPNAME-$pn-link-controller-ca-cert-secret$"
  ${PURGE_VOLUMES:-false} && {
    _log_i "Warning, this will delete the volumes of the plugin"
    ask "Should I proceed?" || EXIT_UE "User interrupted"
    del_resource -l "pvc" "$tpn"
  }
  _log_i "done."
}

del_resource() {
  local MODE="$1"
  shift
  local type="$1"
  shift
  local pn="$1"
  shift
  local res

  del_resource_dd() {
    local type=$1
    shift
    local flt="$1"
    shift
    local LST
    LST="$(_kubectl get "$type" "$flt" --no-headers -o "custom-columns=NAME:.metadata.name" 2>/dev/null)"

    if [ -z "$LST" ]; then
      _log_d "Deleting $type(s):\n  <none>"
      return 254
    else
      _log_d "Deleting $type(s):\n  - ${LST//$'\n'/$'\n  - '}"
    fi

    ${DRY_RUN:-true} && return 0

    if $FORCE && [ "$type" = "pvc" ]; then
      # shellcheck disable=SC2086
      ent kubectl patch pvc $LST -p '{"metadata":{"finalizers":null}}'
    fi

    # shellcheck disable=SC2086
    _kubectl delete "$type" $LST
  }

  case "$MODE:${type/-*/}" in
  "-n:"*)
    del_resource_dd "$type" "$pn"
    res=$?
    ;;
  "-l:"*)
    del_resource_dd "$type" -lEntandoPlugin="$pn"
    res=$?
    ;;
  "-L:"*)
    del_resource_dd "$type" -lEntandoAppPluginLink="$ENTANDO_APPNAME-$pn-link"
    res=$?
    ;;
  "-m:"*)
    local LST DEL
    LST="$(_kubectl get "$type" --no-headers -o "custom-columns=NAME:.metadata.name")"
    DEL=""
    # shellcheck disable=SC2048
    for elem in $*; do
      DEL+="$(echo "$LST" | grep "^${elem}") "
    done
    DEL="${DEL%"${DEL##*[! ]}"}"
    if [ -n "$DEL" ]; then
      # shellcheck disable=SC2086
      _kubectl delete "$type" $DEL
      res=$?
    else
      res=254
    fi
    ;;
  *)
    FATAL "Unknown option $MODE"
    ;;
  esac

  ${DRY_RUN:-true} && {
    _log_d "$type deletion skipped (dry run)"
    return 0
  }

  if [ "$res" -eq 0 ]; then
    _log_d "$type deleted"
  elif [ "$res" -eq 254 ]; then
    _log_w "No $type found for this plugin"
  else
    _log_w "Error deleting the $type"
  fi
}

wait_plugin_resources_deletion() {
  local n
  for type in "$@"; do
    while true; do
      n="$(_kubectl get "$type" -lEntandoPlugin="$pn" 2>/dev/null | wc -l)"
      if [ "$n" -eq 0 ]; then
        echo -e "No resource found of type $type for the plugin"
        break
      else
        printf "\r                                                                  \r"
        printf "Waiting for %s plugin resource(s) of type %s to be deleted" "$n" "$type"
        sleep 3
      fi
    done
  done
}

get_pods_list() {
  local pn="$1"
  _kubectl get pods \
    -lEntandoPlugin="$pn" \
    -o "custom-columns=NAME:.metadata.name,STATUS:.status.phase"
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
publish_version() {
  require_ent_project_dir
  require_pbs_initialized

  echo "~~~"
  _log_i "Publishing the frontend to git"
  fe_push "$@"
  echo "~~~"
  _log_i "Publishing the backend to the docker registry"
  be_push
  _log_i "Publication completed"
}

fe_push() {
  local PPWD="$PWD"
  push_git "$@"
  local R=$?
  __cd "$PPWD"
  return $R
}

be_push() {
  if [ -f "pom.xml" ]; then
    local PPWD="$PWD"
    get_be_info
    push_docker "$IMAGE_FQNAME"
    local R=$?
    __cd "$PPWD"
    return $R
  else
    return 0
  fi
}

be_pod_action() {
  get_be_info

  pods="$(get_pods_list "$IMAGE_FQNAME_ORG-$IMAGE_FQNAME_NAME" | tail +2 | cut -d' ' -f 1)"
  
  [ -z "$pods" ] && FATAL "Pod \"$IMAGE_FQNAME_NAME\" not found"
  
  local res="$1"; shift

  ent pod "$res" "$pods" "$@"
}

push_docker() {
  [ -z "$DOCKER_REGISTRY_URL" ] && _log_d "No docker registry configured, using default"
  docker login "$DOCKER_REGISTRY_URL"
  docker push "$@"
}

push_git() {
  ensure_valid_location_for_git_publication

  args_or_ask -n -F -- "FORCE" '--force' "$@" && {
    _log_i "push_git: Force mode active"
  }
  args_or_ask -a "VERSION_NUMBER" "1/semver/$LATEST_VERSION_NUMBER/%sp bundle version number" "$@"
  DEF="$VERSION_NUMBER  - $(date -u '+%Y-%m-%dT%H:%M:%S%z')"
  args_or_ask -a "VERSION_COMMENT" "2/nn/$DEF/%sp bundle version comment" "$@"

  save_cfg_value "LATEST_VERSION_NUMBER" "$VERSION_NUMBER" "$C_ENT_STATE_FILE"

  __cd bundle

  if [ ! "$(git status --porcelain)" ]; then
    ask "No change detected; Should I proceed anyway?" || EXIT_UE "User interrupted"
  else
    git add -A
    git commit -m "$VERSION_COMMENT"
  fi

  git fetch --tags --force 1>/dev/null

  if git tag | grep -q -F "$VERSION_NUMBER"; then
    if $FORCE; then
      git tag -d "$VERSION_NUMBER" 2>/dev/null 1>&2
    else
      FATAL "Version \"$VERSION_NUMBER\" already exists"
    fi
  fi

  git tag "$VERSION_NUMBER"

  if $FORCE; then
    RES="$(git push --set-upstream origin master --force 2>&1)"
    RV=$?
  else
    RES="$(git push --set-upstream origin master 2>&1)"
    RV=$?
  fi

  if [ $RV -ne 0 ]; then
    if echo "$RES" | head -n 2 | grep -q -F '! [rejected]'; then
      _log_w "Unable to push to the remote repository, reason; REMOTE HISTORY NOT COMPATIBLE"
      _log_w "I'll try to fix it"

      git fetch origin master &&
        git rebase -Xtheirs origin/master

      RES="$(git push 2>&1)"
      RV=$?
    fi
  fi

  local show_version_tag_msg=false
  if [ $RV -ne 0 ]; then
    _log_e "Unable to push to the remote repository, reason; $RES"
    FATAL "Manual intervention required"
  else
    if echo "$RES" | head -n 2 | grep -q -F 'up-to-date'; then
      _log_w "No new content was published: The remote repository is already up to date"
      show_version_tag_msg=true
    else
      _log_i "Version $VERSION_NUMBER published"
    fi
  fi

  git push --tags --force 2>/dev/null
  RV=$?
  if [ $RV -ne 0 ]; then
    _log_e "Error publishing the version tag"
  else
    $show_version_tag_msg && _log_i "Version tags published"
  fi
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
init_project() {
  _log_i "Preparing.."
  ent-init-project-dir && {
    _log_i "Project initialized."
  }
}

get_bundle_repo_url() {
  __cd "./bundle"
  git remote get-url origin
  # shellcheck disable=SC2164
  cd - >/dev/null
}

# shellcheck disable=SC2155
init_project__commit_all() {
  local desc="$1"
  local prj_user_name="$(git config --global user.name)"
  local prj_user_email="$(git config --global user.email)"
  local user_global=false

  if [ -n "$prj_user_name" ] && [ -n "$prj_user_email" ]; then
    if ask "Should I use you global git user?"; then
      user_global=true
    fi
  fi

  if $user_global; then
    git init
  else
    set_or_ask "FE_GIT_USER_NAME" "" "Please provide the user name for the $desc" "$prj_user_name" "assert_ext_ic_id_spc"
    set_or_ask "FE_GIT_USER_EMAIL" "" "Please provide the user email for the $desc" "$prj_user_email" "assert_email"
    git init
    git config user.name "$FE_GIT_USER_NAME"
    git config user.email "$FE_GIT_USER_EMAIL"
  fi

  _log_i "Committing the generated files.."
  git add -A && git commit -m "First generation commit"
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# shellcheck disable=SC2181
init_pub() {
  mkdir -p bundle
  ensure_valid_location_for_git_publication

  GIT_USER_NAME="$(git config user.name 2>/dev/null)"
  GIT_USER_EMAIL="$(git config user.email 2>/dev/null)"

  read_missing_pub_info_from_project_sources_git

  initialize_publication_git_repository "$@"
  ensure_valid_location_for_git_publication :initialized "$@"

  if [ "$?" -eq 0 ]; then
    _log_i "bundle publication repository initialized"
  else
    _log_i "bundle publication repository was not properly initialized"
  fi
}

initialize_publication_git_repository() {
  cd bundle >/dev/null || _FATAL "internal error"

  # Base git init, if required
  [ ! -f .git ] && {
    git init
  }

  # Set origin, if required
  ORIG="$(git remote get-url origin 2>/dev/null)"
  [ -n "$ORIG" ] && {
    _log_w "An origin is already present ($ORIG)"
    ! $FORCE && {
      ask "Should I overwrite it?" || EXIT_UE "User abort"
    }
    git remote remove origin
  }
  git remote add origin "$URL_OF_ORIGIN"

  # User info
  git config user.name "$GIT_USER_NAME"
  git config user.email "$GIT_USER_EMAIL"

  pbs_fe_propose_credentials_cache

  cd - >/dev/null || _FATAL "internal error"

  # Project: gitignore
  local UPD=false
  grep -sq "^bundle/resources/\$" .gitignore || {
    {
      echo -e "\n####"
      echo -e "/bundle/resources/"
    } >> ".gitignore"
    UPD=true
  }
  grep -sq "^$C_ENT_STATE_FILE\$" .gitignore || {
    ! $UPD && echo -e "\n####"
    echo -e "\n$C_ENT_STATE_FILE" >>.gitignore
    UPD=true
  }
  $UPD && _log_d "bundle project .gitignore updated"
}

require_ent_project_dir() {
  [ "$(basename "$PWD")" == "bundle" ] && {
    COMMENT=". If you are in the project's bundle-publication folder go back to the project's root dir"
  }

  [ ! -f "$C_ENT_PRJ_FILE" ] &&
    FATAL "The current dir doesn't seem to contain a valid bundle project (no project file)$COMMENT"
  [ ! -f "./bundle/$C_BUNDLE_DESCRIPTOR_FILE_NAME" ] &&
    FATAL "The current dir doesn't seem to contain a valid bundle project (not bundle dir)$COMMENT"

}

require_pbs_initialized() {
  [ -d "bundle/.git" ] || FATAL "Publication repository not initialized"
}

ensure_valid_location_for_git_publication() {
  local FORCE
  args_or_ask -n -F -- "FORCE" '--force' "$@" && {
    _log_i "valid_loc: Force mode active"
  }

  # valid path
  if [ ! -f "$C_ENT_PRJ_FILE" ]; then
    if [ -f "./bundle/$C_BUNDLE_DESCRIPTOR_FILE_NAME" ]; then
      generate_ent_project_file
    else
      FATAL "The current dir doesn't seem to contain a valid bundle project"
    fi
  fi

  if [ "$1" = ":initialized" ]; then
    cd bundle || _FATAL "internal error"

    # git initialized
    [ -d ".git" ] || FATAL "Publication repository not initialized"

    ORIG="$(git remote get-url origin 2>/dev/null)"
    [ -z "$ORIG" ] && FATAL "Repo not initialized (run \"${0##*/} init ...\")"

    # git user data set
    [ -z "$(git config user.name 2>/dev/null)" ] && FATAL 'Publication user name is not set'
    [ -z "$(git config user.email 2>/dev/null)" ] && FATAL 'Publication user email is not set'

    local MODE="NORMAL"

    # git master branch
    if [ "$(git ls-remote origin master)" ]; then
      # remote already has a master => import it
      _log_w "A remote master has been detected"
      ask "Should I import it?"

      if [ $? -ne 0 ]; then
        # USER CHOSE TO NOT IMPORT
        if $FORCE; then
          MSG="PLEASE NOTE: You chose to not import the remote repository and the force flag was provided, "
          MSG+="therefore I will now DESTROY the remote repository content and replace it with the local content"
          echo ""
          _log_w "$MSG"
          echo ""
          ask "Should I DESTROY the remote repository content and proceed?" "N" || EXIT_UE "User interrupted"
          MODE="OVERRIDE"
        else
          MSG="PLEASE NOTE: You chose to not import the remote repository, however in this condition the local copy of "
          MSG+="your build artifacts will collide with the remote one. In order to proceed, the collision "
          MSG+="should be resolved by applying one of these solutions: 1) import the remote artifacts repository "
          MSG+="2) reset the remote artifacts repository 3) provide a new, empty artifacts repository"
          echo ""
          _log_w "$MSG"
          EXIT_UE "Unable to proceed; manual intervention required"
        fi
      else
        # USER CHOSE TO IMPORT
        MSG="PLEASE NOTE: You chose to import the remote master."
        MSG+="Your local build artifacts may be discarded. "
        MSG+="If you just run a build, you'd better run it again."
        echo ""
        _log_w "$MSG"
        echo ""
        ask "Should I proceed?" "Y" || EXIT_UE "User interrupted"
        MODE="IMPORT"
      fi

      if [ "$MODE" = "IMPORT" ]; then
        # LOCAL BRANCH BACKUP
        if [ "$(git status --porcelain)" ]; then
          local BBN="__AUTOSAVE_$(date -u '+%Y-%m-%dT%H-%M-%S%z')__"
          _log_w "Saving the local changes to the backup branch: \"$BBN\""
          git reset HEAD 2>/dev/null
          git checkout -b "$BBN" &&
            git add -A &&
            git commit -m "$BBN"

          # IMPORT
          _log_d "Checking out the remote master"
          git branch -m master master_old &>/dev/null
          git branch -D master &>/dev/null
          git fetch origin master
          git checkout -b master origin/master || FATAL "Error checking out the remote master"
          git branch -D master_old &>/dev/null
        fi
      fi
    fi

    if [[ "$MODE" == "NORMAL" || "$MODE" == "OVERRIDE" ]]; then
      # there is no master on remote
      echo "" >.gitignore
      touch descriptor.yaml
      git add .gitignore descriptor.yaml
      ls plugins/*.yaml 1>/dev/null && git add plugins/*.yaml
      git commit --allow-empty -m "init" || {
        _log_e "Error executing the init commit"
        return $?
      }
      git checkout -b master &>/dev/null
      if [ "$MODE" = "OVERRIDE" ]; then
        git push --set-upstream origin master --force || FATAL "Error pushing the base initialization"
      else
        git push --set-upstream origin master || FATAL "Error pushing the base initialization"
      fi
    fi

    cd - >/dev/null || _FATAL "internal error"
  fi

  return 0
}

# If some information is missing tries to read it from the project
read_missing_pub_info_from_project_sources_git() {
  cd .. || _FATAL "internal error"

  [ -z "$GIT_USER_NAME" ] && {
    GIT_USER_NAME="$(git config user.name 2>/dev/null)"
    [ -n "$GIT_USER_NAME" ] && _log_d "Assuming user name \"$GIT_USER_NAME\" from the bundle project dir"
  }

  [ -z "$GIT_USER_EMAIL" ] && {
    GIT_USER_EMAIL="$(git config user.email 2>/dev/null)"
    [ -n "$GIT_USER_EMAIL" ] && _log_d "Assuming user email \"$GIT_USER_EMAIL\" from the bundle parent project dir"
  }

  cd - >/dev/null || _FATAL "internal error"
}

pbs_fe_propose_credentials_cache() {
  ! $IS_GIT_CREDENTIAL_MANAGER_PRESENT && return 99

  local TIMEOUT=""
  ask "Should I enable the credentials cache for the publication of the frontend?" && {
    set_or_ask TIMEOUT "" "Expiration in seconds?" "$((3600 * 24))" && {
      git_enable_credentials_cache "$TIMEOUT"
    }
  }
}

parse_be_arguments() {
  OPT_CLEAN="clean"
  args_or_ask -n -f ${HH:+"$HH"} '--no-clean///avoid cleaning the build artifacts before the build' "$@" && {
    OPT_CLEAN=""
  }
  OPT_TESTS=""
  args_or_ask -n -f ${HH:+"$HH"} '--no-tests///avoid cleaning the build artifacts before the build' "$@" && {
    OPT_TESTS="-Dmaven.test.skip=true"
  }
  args_or_ask ${HH:+"$HH"} -n -s OPT_MVN_PROFILE "-P//prod/the maven profile" "$@"
}

# ######################################################################################################################
# ######################################################################################################################
# ######################################################################################################################

if [[ "$1" == "--help" || "$1" == "" ]]; then
  . s/essentials.sh
  print_ent_module_help "${BASH_SOURCE[0]}" "$2"
  exit 0
fi

[ "$1" = "--cmplt" ] && {
  . s/essentials.sh
  print_ent_module_sub-commands "${BASH_SOURCE[0]}"
  exit 0
}

. s/_base.sh
cd - >/dev/null || _FATAL "internal error"

RUN "$@"
