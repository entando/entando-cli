#!/bin/bash

[ "$1" = "--help" ] && {
  name="${0##*/}"
  echo -e "Displays information about an entando app" && exit 0
}

[ "$1" = "--cmplt" ] && {
  echo -e "watch\nstatus"
  exit 0
}

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
cd "$DIR/../.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

. s/_base.sh

if [ -n "$DESIGNATED_VM" ]; then
  multipass exec "$DESIGNATED_VM" -- bash -c "source .entando/activate && ent app-info $*"
  exit
fi

WATCH=false
STATUS=false
[ "$1" == "watch" ] && {
  WATCH=true
  shift
}
[ "$1" == "status" ] && {
  STATUS=true
  shift
}

reload_cfg
[ "$1" != "" ] && ENTANDO_NAMESPACE="$1"

export SYS_GNU_LIKE

$WATCH && {
  start_time="$(date -u +%s)"
  _watch s/check-app-status.sh "$ENTANDO_NAMESPACE" "$ENTANDO_APPNAME" "$start_time"
  exit
}

$STATUS && {
  s/check-app-status.sh "$ENTANDO_NAMESPACE" "$ENTANDO_APPNAME"
  exit
}

_kubectl-pre-sudo -m

_log_i 1 "NODES:"
_kubectl get nodes

_log_i 1 "PODS:"
_kubectl get pods -A

_log_i 1 "Application Ingress path:"

J0='{.items[0].spec.rules[*].host}{.items[0].spec.rules[*].http.paths[2].path}{"\n"}'
J1='{.items[1].spec.rules[*].host}{.items[1].spec.rules[*].http.paths[2].path}{"\n"}'
J2='{.items[2].spec.rules[*].host}{.items[2].spec.rules[*].http.paths[2].path}{"\n"}'

RES="$(
    _kubectl get ingress -n "$ENTANDO_NAMESPACE" -o jsonpath="$J0" 2> /dev/null
    _kubectl get ingress -n "$ENTANDO_NAMESPACE" -o jsonpath="$J1" 2> /dev/null
    _kubectl get ingress -n "$ENTANDO_NAMESPACE" -o jsonpath="$J2" 2> /dev/null
)"

[ -z "$RES" ] && FATAL "Application Ingress path not found"

echo "$RES"