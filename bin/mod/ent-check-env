#!/bin/bash

# HELP HEADER
#H::
#H:: Checks the environment for required dependencies and settings
#H::
#H:: Syntax:
#H::  - {{TOOL-NAME}} [options] {sub-command}
#H::
#H:: SubCommands:

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
cd "$DIR/../.." || { echo "Internal error: unable to find the script source dir" 1>&2; exit; }
. s/_base.sh

RUN() {
  RESULT_FILE="$(mktemp)"
  # shellcheck disable=SC2064
  trap "[ -f \"$RESULT_FILE\" ] && rm \"$RESULT_FILE\"" exit
  # COMMON REQS
  check-env.common.minimal-requirements
  
  check-env.extention-modules "$ENTANDO_CLI_CHECKENV_MODE"

  export WAS_DEVELOP_CHECKED=true   # in order to allow to run the version command

  # DEVELOP TOOLS
  $M_DEVL && check-env.develop.minimal-tools-requirements

  # ENT-LOCAL NODE
  $M_DEVL && check-env.check-node
  $M_DEVL && check-env.check-jhipster
  $M_DEVL && check-env.check-generator-jhipster-entando
  $M_DEVL && check-env.check-bundler
  $M_DEVL && check-env.check-bundle-cli

  # RUNTIME
  $M_KUBE && check-env.runtime.check-k3s
  $M_KUBE && check-env.runtime.minimal-sys-requirements
  $M_KUBE && $M_QS && check-env.runtime.quickstart.apply-fixes
  $M_KUBE && check-env.runtime.check-dns
  
  # EXTENSION MODULES
  check-env.extention-modules "$ENTANDO_CLI_CHECKENV_MODE"

  # COMMIT
  $M_DEVL && save_cfg_value "WAS_DEVELOP_CHECKED" "true" "$ENT_DEFAULT_CFG_FILE"
}

########################################################################################################################
########################################################################################################################
########################################################################################################################

check-env.common.minimal-requirements() {
  check_ver "git" "*.*.*" "--version | head -n 1" || DEPENDENCY_ERROR "$FAIL_MSG"
  check_ver "command" "*.*.*" "-V sed" || DEPENDENCY_ERROR "$FAIL_MSG"
  check_ver "perl" "*.*.*" "--version | grep -v '^[[:space:]]*$' | head -n 1 | sed 's/.*(\([^ ]*\)).*/\1/'" || {
    DEPENDENCY_ERROR "$FAIL_MSG"
  }
  check_ver "awk" "*.*.*" "--version | head -n 1" "quiet" || {
    check_ver "awk" "*.*.*" "-W version 2>&1 | head -n 1" "literal" || {
      DEPENDENCY_ERROR "$FAIL_MSG"
    }
  }
  check_ver "grep" "*.*.*" "--version | head -n 1" || DEPENDENCY_ERROR "$FAIL_MSG"
  check_ver "cat" "-" "-" || DEPENDENCY_ERROR "$FAIL_MSG"
}
  
check-env.runtime.minimal-sys-requirements() {
  check_ver "hostname" "*.*.*" "--version | head -n 1" || DEPENDENCY_ERROR "$FAIL_MSG";
  check_ver "dig" "*.*.*" "-v 2>&1" literal || DEPENDENCY_ERROR "$FAIL_MSG";
  check_ver "curl" "*.*.*" "--version | head -n 1" || DEPENDENCY_ERROR "$FAIL_MSG"
}

check-env.runtime.check-k3s() {
  if [ -n "$ENTANDO_K3S_VERSION_OVERRIDE" ]; then
    VER_K3S_REQ="$ENTANDO_K3S_VERSION_OVERRIDE"
    VER_K3S_DEF="$ENTANDO_K3S_VERSION_OVERRIDE"
  fi
  
  if check_ver "k3s" "$VER_K3S_REQ" "--version 2>/dev/null | _perl_sed 's/k3s version (.*)\+k.*/\1/'"; then
    # shellcheck disable=SC2154
    _log_i "\tfound: $check_ver_res => OK"
  else
    if ask "Should I try to install it?" "y"; then
      curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="$VER_K3S_DEF" sh -
    else
      prompt "Recommended dependency not found, some command may not work as expected.\nPress enter to continue.."
    fi
  fi
}  

check-env.extention-modules() {
  local module;
  while IFS= read -r module; do
    _ent.extension-module.execute "$module" check-env || {
      DEPENDENCY_ERROR "$FAIL_MSG"
    }
  done < <(_ent.extension-modules.list)
}

check-env.develop.minimal-tools-requirements() {
  #[ -z "$VER_JDK_REQ" ] && VER_JDK_REQ="11.*.*"
  check_ver "java" "*.*.*" "-version 2>&1 | head -n 1 | awk '{gsub(/\"/, \"\", \$3);print \$3}'" || {
    DEPENDENCY_ERROR "$FAIL_MSG"
  }
  
  check_ver "docker" "*.*.*" "--version | sed 's/.*version \([0-9a-zA-Z.+-]*\).*/\1/'" || DEPENDENCY_ERROR "$FAIL_MSG"

  check_ver "watch" "*.*.*" "-v" || {
    prompt "Recommended dependency not found, workaround will be applied.\nPress enter to continue.."
  }
  
  check_ver "_jq" "*.*.*" "--version" || {
    if ask "Should I try to install it?" "y"; then
      (_pkg_get "jq") || DEPENDENCY_ERROR "$FAIL_MSG"
    else
      DEPENDENCY_ERROR "$FAIL_MSG"
    fi
  }
  
  check_ver "_crane" "*.*.*" "version" || {
    if ask "Should I try to install it?" "y"; then
      (_pkg_get "crane") || DEPENDENCY_ERROR "$FAIL_MSG"
    else
      DEPENDENCY_ERROR "$FAIL_MSG"
    fi
  }
}


check-env.runtime.quickstart.apply-fixes() {
  ! "$NO_DNS_FIX" && make_safe_resolv_conf
}

check-env.runtime.check-dns() {
  _log_i "Checking DNS"

  dns_state="$(s/check-dns-state.sh)"

  case ${dns_state:-""} in
    "full")
      true
      ;;
    "no-dns")
      _log_e "SEVERE: This system appears to have no DNS."
      ask "Should I proceed anyway?" || FATAL "Quitting"
      ;;
    "filtered[RR]")
      _log_e "SEVERE: DNS query for local addresses appears to be actively filtered."
      ask "Should I proceed anyway?" || FATAL "Quitting"
      ;;
    "filtered[R]")
      if $M_QS; then
        _log_e "SEVERE: Your DNS server appears to implement DNS rebinding protection, preventing queries like 192.168.1.1.nip.io to work."
        ask "Workaround doesn't seem to work. Should I proceed anyway?" || FATAL "Quitting"
      else
        _log_e "SEVERE: Your DNS server appears to implement DNS rebinding protection, preventing queries like 192.168.1.1.nip.io to work."
        if $NO_DNS_FIX; then
          ask "Should I proceed anyway?" || FATAL "Quitting"
        else
          ask "Should I alter the resolv.conf?" && {
            make_safe_resolv_conf
          }
        fi
      fi
      ;;
    "*")
      _log_e "SEVERE: Unable to precisely determine the status of the DNS."
      ask " Should I proceed anyway?" || FATAL "Quitting"
      ;;
  esac
}

check-env.check-node() {
  __cd "$ENTANDO_ENT_HOME"
  mkdir -p "lib/node"

  _log_i "Checking ENT private installation of node.js.."
  
  if [ -n "$ENTANDO_NODE_VERSION_OVERRIDE" ]; then
    VER_NODE_REQ="$ENTANDO_NODE_VERSION_OVERRIDE"
    VER_NODE_DEF="$ENTANDO_NODE_VERSION_OVERRIDE"
  fi
  
  check_ver "_ent-node" "$VER_NODE_REQ" "--version" "quiet,verbose" "" || {
    _log_w "ENT private node.js installation is not available"
    if ask "Should I try to install it?" "y"; then
      node.install-node "$VER_NODE_DEF"
      
      _log_i "Node installed and activated:"
      echo "  NODE: $(_ent-node --version)"
      echo "  NPM: $(_ent-npm_direct --version)"
    else
      DEPENDENCY_ERROR "Mandatory dependency not available"
    fi
  }
  
  reload_cfg "$ENTANDO_GLOBAL_CFG"
  reload_cfg
  node.activate_environment || DEPENDENCY_ERROR "Unable to activate the found version"
}

check-env.check-jhipster() {
  local FLAGS FORCE=false
  parse-version-flags FLAGS VER_JHIPSTER_DEF VER_JHIPSTER_REQ ENTANDO_JHIPSTER_VERSION_OVERRIDE
  _str_contains "$FLAGS" ",f," && FORCE=true

  check-env.npm-registry-package central-registry "jhipster" "generator-jhipster" \
    "$VER_JHIPSTER_REQ" \
    "$VER_JHIPSTER_DEF" \
    "$ENTANDO_JHIPSTER_VERSION_OVERRIDE" \
    "$FORCE"
}


# ----------------------------------------------------------------------------------------------------------------------
# BUNDLE-CLI

check-env.check-bundle-cli() {
  local FLAGS FORCE=false
  parse-version-flags FLAGS VER_ENTANDO_BUNDLE_CLI_DEF VER_ENTANDO_BUNDLE_CLI_REQ ENTANDO_BUNDLE_CLI_VERSION_OVERRIDE
  _str_contains "$FLAGS" ",f," && FORCE=true

  if _str_contains "$FLAGS" ",g,"; then
    check_npm_git_package --full "$REPO_ENTANDO_BUNDLE_CLI_ADDR" \
      "$VER_ENTANDO_BUNDLE_CLI_REQ" "$VER_ENTANDO_BUNDLE_CLI_DEF" \
      "$C_ENTANDO_BUNDLE_CLI_DIR" "$C_ENTANDO_BUNDLE_CLI_DIR" \
      "$FORCE"
  else
    check-env.npm-registry-package entando-registry "entando-bundle-cli" "@entando/entando-bundle-cli" \
      "$VER_ENTANDO_BUNDLE_CLI_REQ" "$VER_ENTANDO_BUNDLE_CLI_DEF" \
      "$FORCE"
  fi
}

check-env.check-generator-jhipster-entando() {
  local FLAGS FORCE=false
  parse-version-flags FLAGS VER_GENERATOR_JHIPSTER_ENTANDO_DEF VER_GENERATOR_JHIPSTER_ENTANDO_REQ ENTANDO_GENERATOR_JHIPSTER_VERSION_OVERRIDE
  _str_contains "$FLAGS" ",f," && FORCE=true

  check_npm_git_package "$REPO_GENERATOR_JHIPSTER_ENTANDO_ADDR" \
    "$VER_GENERATOR_JHIPSTER_ENTANDO_REQ" "$VER_GENERATOR_JHIPSTER_ENTANDO_DEF" \
    "$C_GENERATOR_JHIPSTER_ENTANDO_NAME" "$C_GENERATOR_JHIPSTER_ENTANDO_NAME"  \
    "$FORCE"
}

check-env.check-bundler() {
  local FLAGS FORCE=false
  parse-version-flags FLAGS VER_ENTANDO_BUNDLER_DEF VER_ENTANDO_BUNDLER_REQ ENTANDO_BUNDLER_VERSION_OVERRIDE
  _str_contains "$FLAGS" ",f," && FORCE=true
  
  check_npm_git_package "$REPO_ENTANDO_BUNDLER_ADDR" \
    "$VER_ENTANDO_BUNDLER_REQ" "$VER_ENTANDO_BUNDLER_DEF" \
    "$C_ENTANDO_BUNDLER_DIR" "$C_ENTANDO_BUNDLER_DIR" \
    "$FORCE"
}

########################################################################################################################

parse-version-flags() {
  local _tmp_ver="${!2}" _tmp_flags
  [ -n "${!4}" ] && _tmp_ver="${!4}"
  
  IFS=: read -r _tmp_flags _tmp_ver <<< "$_tmp_ver"
  [ -z "$_tmp_ver" ] && {
    _tmp_ver="$_tmp_flags"
    _tmp_flags=""
  }
  
  _set_var "$1" ",$_tmp_flags,"
  _set_var "$2" "$_tmp_ver"
  if [ -n "${!4}" ]; then
    _set_var "$3" "$_tmp_ver"
    _set_var "$4" "$_tmp_ver"
  fi
}

check_ver_cfg() {
  if [ ! -f "$ENT_WORK_DIR/.cfg" ]; then
    local VERS
    VERS="$(list_compatible_installations "$ENTANDO_CLI_VERSION")"
    if [ -n "$VERS" ]; then
      _log_w "This installation has no config"
      ask "Should I try to import from another one?" && {
        import_ent_installation
      }
    fi
  fi
  exit
}

# checks the installation status of a npm package installed from source
#
# Options:
#   --full              also runs mpm build
#   --no-local-install  avoid running npm install .
#
# Args:
# $1: package url
# $2: requested version range
# $3: default version
# $4: package name
# $5: package description
check_npm_git_package() {
  local FULL=false; [ "$1" = "--full" ] && { FULL=true; shift; } 
  local WITHINST=true; [ "$1" = "--no-local-install" ] && { WITHINST=false; shift; } 
  local ADDR="$1"; shift
  local VER_REQ="$1"; shift
  local VER_DEF="$1"; shift
  local PACKAGE_NAME="$1"; shift
  local PACKAGE_DESC="$1"; shift
  local FORCE="$1"; shift

  _log_i "Checking ENT private installation of $PACKAGE_DESC.."

  (
    if [ -n "$VER_OVERRIDE" ]; then
      VER_REQ="$VER_OVERRIDE"
      VER_DEF="$VER_OVERRIDE"
    fi
    
    [ ! -d "$ENT_OPTS_ENTANDO" ] && __mk_disdir "$ENT_OPTS_ENTANDO"
    __cd "$ENT_OPTS_ENTANDO"
    
    local skip=false forced=false
    if [ -f "$PACKAGE_NAME/$VER_REQ/.entando-finalized" ]; then
      if [ "$FORCE" == "true" ]; then
        skip=false forced=true
        _log_i "\tfound: $VER_REQ but force-reinstall was specified => REINSTALL"
        __rm_disdir "$PACKAGE_NAME/$VER_REQ"
        _ent-npm.delete-internal-tool-bin "$npm_package"
      else
        skip=true
      fi
    fi
    
    if "$skip"; then
      _log_i "\tfound: $VER_REQ => OK"
      _log_i "\tupdating bins"
      __cd "$PACKAGE_NAME/$VER_REQ"
      (_ent-npm_direct install --global 1>/dev/null 2>&1 | grep -v "npm WARN") 1>&2
      exit 0
    else
      ! $forced && _log_i "Version \"$VER_REQ\" of \"$PACKAGE_DESC\" was not found among the ENT-private packages"

      if ask "Should I try to install it?" "y"; then
        [ ! -d "$PACKAGE_NAME" ] && __mk_disdir "$PACKAGE_NAME"
        __cd "$PACKAGE_NAME"
        local BASE_PACKAGE_DIR="$PWD"
        [[ -d "$BASE_PACKAGE_DIR/$VER_DEF" ]] && __rm_disdir "$BASE_PACKAGE_DIR/$VER_DEF"
        __mk_disdir "$BASE_PACKAGE_DIR/$VER_DEF"

        (
          local EC=0
          git_clone_repo "$ADDR" "$VER_DEF" "$VER_DEF" "$PACKAGE_DESC" "ENTER,FATAL"
          EC="$?"
          if [[ -d "$BASE_PACKAGE_DIR/$VER_DEF" ]]; then
            __mk_disdir --mark "$BASE_PACKAGE_DIR/$VER_DEF"
          fi
          
          if [ "$EC" != 0 ]; then
            [[ -d "$BASE_PACKAGE_DIR/$VER_DEF" ]] && __rm_disdir "$BASE_PACKAGE_DIR/$VER_DEF"
            _FATAL -s "Error while cloning the repository of package \"$PACKAGE_DESC\""
          fi
          
          [[ "$PWD" != "$BASE_PACKAGE_DIR/$VER_DEF" ]] && _FATAL -s "Inconsistent directory structure"

          # CLEANUP          
          (
            __cd "$ENT_NODE_MODS"
            _remove_broken_symlink "$PACKAGE_NAME"
            __cd "$ENT_NODE_BINS"
            _remove_broken_symlink "$PACKAGE_NAME"
            _ent-npm_direct uninstall --global "$PACKAGE_NAME" &> /dev/null
          ) &>/dev/null
          
          # BUILD
          _log_i "Building.."
          
          (
            if $FULL; then
              ___npm "PHASE 1/a" install
              ___npm "PHASE 1/b" run build
            elif $WITHINST; then
              ___npm "PHASE 1" install
            fi
          ) || _SOE

          # ACTUAL INSTALLATION
          ___npm "PHASE 2" install --global

          date > .entando-finalized
          echo '~~~'$'\n'

        ) || {
          local EC="$?"
          _log_e "An error has occurred while installing $PACKAGE_DESC.. rolling back"
          __cd "$BASE_PACKAGE_DIR"
          [ -d "$PACKAGE_NAME/$VER_DEF" ] && __rm_disdir "$BASE_PACKAGE_DIR/$VER_DEF"
          exit $EC
        }
      else
        PRIVATE_DEPENDENCY_INSTALL_ERROR "Mandatory dependency not available"
      fi
    fi
  ) || exit "$?"
}

check-env.npm-registry-package() {
  # shellcheck disable=SC2034
  local registry_type="$1"; shift
  local package="$1"; shift
  local npm_package="$1"; shift
  local version_req="$1"; shift
  local version_def="$1"; shift
  local FORCE="$1"; shift; [ "$FORCE" != "true" ] && { FORCE=""; }

  _log_i "Checking ENT private installation of $package.."
  
  check_ver "_ent-$package" "$version_req" "--ent-get-version" "quiet,verbose" \
    "Version \"$version_req\" of \"$package\" was not found among the ENT-private packages" ||
  {
    if ask "Should I try to install it?" "y"; then
      (
        _ent-npm_direct config set @entando:registry "$ENTANDO_NPM_REGISTRY"
        [ "$FORCE" == "true" ] && _ent-npm.delete-internal-tool-bin "$npm_package"
        ___npm "INSTALL" install --global "$npm_package@$version_def" ${FORCE:+--force}
      )
    else
      DEPENDENCY_ERROR "Mandatory dependency not available"
    fi
    
    check_ver "_ent-$package" "$version_req" "--ent-get-version" "quiet,verbose" || {
      PRIVATE_DEPENDENCY_INSTALL_ERROR "Unable to install \"$package\" ($version_def)"
    }
  }
}


PARSE_ARGS() {
  bgn_help_parsing "${BASH_SOURCE[0]}" "$@"
  [ "$1" = "--cmplt" ] && { echo -e "develop\nruntime"; exit 0; }
  args_or_ask -h "$HH" -n -a -- ARG1 '1///the SubCommand' "$@"
  args_or_ask -h "$HH" -n -F NO_DNS_FIX "--no-dns-fix///Does't try to fix the DNS when starting the quickstart" "$@"
  args_or_ask -h "$HH" -n -F ENTANDO_OPT_YES_FOR_ALL "--yes///Assumes yes for all yes-no questions" "$@"
  args_or_ask -h "$HH" -n -F LENIENT "--lenient///Assumes yes for all yes-no questions" "$@"
  args_or_ask -h "$HH" -n -F VERBOSE "--verbose///Prints more details" "$@"
  args_or_ask -h "$HH" -n -F EXT_MOD "--include-extension-modules///also runs the check-env of the extension modules" "$@"
  
  args_or_ask -h "$HH" -n ENTANDO_K3S_VERSION_OVERRIDE "--k3s-version///overrides the k3s version to use" "$@"
  args_or_ask -h "$HH" -n ENTANDO_NODE_VERSION_OVERRIDE "--node-version///overrides the node version to use" "$@"
  args_or_ask -h "$HH" -n ENTANDO_BUNDLER_VERSION_OVERRIDE "--entando-bundler-version///overrides the entando-bundler to use" "$@"
  args_or_ask -h "$HH" -n ENTANDO_BUNDLE_CLI_VERSION_OVERRIDE "--entando-bundle-cli-version///overrides the entando-bundle-cli version to use" "$@"
  args_or_ask -h "$HH" -n ENTANDO_GENERATOR_JHIPSTER_VERSION_OVERRIDE "--entando-ecg-version///overrides the ecg version to use" "$@"
  args_or_ask -h "$HH" -n ENTANDO_JHIPSTER_VERSION_OVERRIDE "--entando-jhipster-version///overrides the jhipster version to use" "$@"


  end_help_parsing


  FATAL_DEPENDENCY_ERROR() { 
    local msg="### DEPENDENCY ERROR"$'\n'
    msg+="### Recommended dependency was not found and cannot be automatically installed."$'\n'
    msg+="### Please install ${1:-it} manually or use --lenient to ignore this error"$'\n'
    echo $'\n'"$msg"$'\n'
    exit 99; 
  }
  
  PRIVATE_DEPENDENCY_INSTALL_ERROR() { 
    echo "~"
    _log_e "$1"
    local msg="### DEPENDENCY ERROR"$'\n'
    msg+="### It has not been possible to install a required dependency"$'\n'
    msg+="### Use --lenient to ignore this error"$'\n'
    echo $'\n'"$msg"$'\n'
    exit 99; 
  }

  if $LENIENT; then
    DEPENDENCY_ERROR() {
      prompt "Recommended dependency not found, some command may not work as expected.\nPress enter to continue.."
    }
    PRIVATE_DEPENDENCY_INSTALL_ERROR() {
      prompt "Can't install recommended dependency, some command may not work as expected.\nPress enter to continue.."
    }
  else
    DEPENDENCY_ERROR() { FATAL_DEPENDENCY_ERROR "$@"; }
  fi

  M_DEVL=false
  M_KUBE=false
  M_QS=false
  ENTANDO_CLI_CHECKENV_MODE="$ARG1"
  
  case "$ARG1" in
    develop) #H: environment for bundle developers
      M_DEVL=true
      ;;
    runtime) #H: kubernetes execution environment
      ! $OS_LINUX && FATAL "not supported on this OS"
      M_KUBE=true
      ;;
    qs-runtime) #H: kubernetes execution environment for the quickstart
      ! $OS_LINUX && FATAL "not supported on this OS"
      ask "I need to alter your resolv.conf. Can I proceed?" || FATAL "Quitting"
      M_KUBE=true
      M_QS=true
      ;;
    all) #H: all checks
      ! $OS_LINUX && FATAL "not supported on this OS"
      M_DEVL=true
      M_KUBE=true
      ;;
    *)
      print_ent_module_help "${BASH_SOURCE[0]}" "$ARG2"
      exit 0
      ;;
  esac
}

___npm() {
  local SPINNER_TITLE="$1";shift
  if "$VERBOSE"; then
    _ent-npm_direct "$@"
    _SOE
  else
    echo "## $SPINNER_TITLE" >> "$RESULT_FILE"
    echo "##" >> "$RESULT_FILE"
    _ent-npm_direct "$@" 2>&1 | _with_spinner --out "$RESULT_FILE" "$SPINNER_TITLE"
    _SOE --pipe 0 --res-file "$RESULT_FILE"
  fi
}

########################################################################################################################
[[ "$1" == "--help" && "$2" == "--short" ]] && {
  echo "Checks the environment for required dependencies and settings"
  exit 0
}

PARSE_ARGS "$@"
RUN "$@"
_log_i "${0##*/} execution completed"
