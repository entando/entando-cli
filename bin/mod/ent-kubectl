#!/bin/bash

# HELP HEADER
#H::
#H:: Helper for using kubectl in ent managed scenarios
#H::
#H:: Syntax:
#H::  - {{TOOL-NAME}} {sub-command}
#H::
#H:: SubCommands:

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
cd "$DIR/../.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RUN() {
  local CMD
  local TMP
  local NAMESPACE

  reload_cfg "$C_ENT_PRJ_FILE"
  reload_cfg "$C_ENT_STATE_FILE"

  case "$1" in
    "ent-print-kubeconfig") #H: prints the command for setting the kubectl configuration
      shift
      if [ -n "$DESIGNATED_KUBECONFIG" ]; then
        echo "export KUBECONFIG=\"$DESIGNATED_KUBECONFIG\""
      else
        _log_e 0 "No ENT KUBECONFIG set"
      fi
      ;;
    "ent-set-cmd") #H: prints the command for setting the kubectl environment
      #H:- {command}: uses this command to run kubectl
      shift
      set_kubectl_command "$@"
      ;;
    "ent-clear-cmd") #H: prints the command for setting the kubectl environment
      shift
      clear_kubectl_command --clear
      ;;
    "ent-auto-align") #H: prints the command for setting the kubectl environment
      shift
      auto_align_with_server
      ;;
    *) #H: any other command is passed to kubectl
      HH="$(parse_help_option "$@")"; show_help_option "$HH"
      args_or_ask ${HH:+"$HH"} -n "NAMESPACE" "--namespace" "$@"
      args_or_ask ${HH:+"$HH"} -n -s -p "NAMESPACE" "-n" "$@"
      [ -n "$HH" ] && exit 0

      if [ -z "$ENT_KUBECTL_CMD" ]; then
        if [[ "$1" = "create" || "$1" = "apply" ]]; then
          if [ -z "$NAMESPACE" ]; then
            if [ -n "$DESIGNATED_VM" ]; then
              CMD="$1";shift
              map-get REMOTES TMP "$DESIGNATED_VM"
              NAMESPACE="$(echo "$TMP" | cut -d'/' -f 1)"
            fi
            [ -z "$NAMESPACE" ] && FATAL "Please provide the namespace"
          fi
        fi
      fi

      if [ -n "$CMD" ]; then
        _kubectl "$CMD" -n "$NAMESPACE" "$@"
      else
        _kubectl "$@"
      fi
      ;;
  esac
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
clear_kubectl_command() {
  args_or_ask -f -- "--clear" "$@" && {
    save_cfg_value "ENT_KUBECTL_CMD" ""
  }
}

set_kubectl_command() {
  args_or_ask -n -f -- '--help' "$@" && {
    local HH="--help"
    echo "> Parameters:"
  }

  # reset kubeconfig setup
  # kubectl_mode --reset-cfg
  
  args_or_ask -a ${HH:+"$HH"} "ENT_KUBECTL_CMD" "1///%sp kubectl command to use" "$@"
  save_cfg_value "ENT_KUBECTL_CMD" "$ENT_KUBECTL_CMD"
  
  args_or_ask -n ${HH:+"$HH"} KUBECONFIG "--kubeconfig" "$@" && {
    save_cfg_value "DESIGNATED_KUBECONFIG" "$KUBECONFIG"
  }
}

print_status_info() {
  if [ -n "$ENT_KUBECTL_CMD" ]; then
    local mode="via user command: \"$ENT_KUBECTL_CMD\""
  elif [ -n "$DESIGNATED_VM" ]; then
    local mode="via VM link to: \"$DESIGNATED_VM\""
  else
    local mode="via auto-detected kubectl"
  fi

  echo ""
  echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  echo "~ ent kubectl is currently attached $mode"
  echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auto_align_with_server() {
  local ver
  ver=$(
  _kubectl version --client=false --short \
    | grep "Server Version: v" | sed "s/Server Version: v/v/" \
    | sed "s/\+.*//" | grep -E "v[0-9]*\.[0-9]*\.[0-9]*"
  )
  
  [[ -z "$ver" ]] && FATAL "Unable to determine the server version number"

  (
    mkdir -p "$HOME/.entando/bin"
    __cd "$HOME/.entando/bin"

    EXT=""
    [ "$SYS_OS_TYPE" == "windows" ] && EXT=".exe"
    COMMENT=" and checked"
    KUBECTL_NAME="kubectl.$ver$EXT"

    if [ ! -f "$KUBECTL_NAME" ]; then
      _log_i 1 "I don't have the kubectl for this server (\"$ver\"). I'll try to download it"
      
      # DOWNLOAD kubectl
      _log_i 1 "Downloading kubectl \"$ver\""
      
      RES=$(
        curl -Ls --write-out '%{http_code}' -o "kubectl.tmp" \
        "https://dl.k8s.io/release/$ver/bin/$SYS_OS_TYPE/amd64/kubectl$EXT"
      ) 
      
      [[ "$RES" != "200" ]] && {
        #~
        FATAL "Unable to download kubectl"
      }
      
      # DOWNLOAD checksum
      _log_i 1 "Downloading kubectl \"$ver\" checksum"
      
      RES=$(
        curl -Ls --write-out '%{http_code}' -o "$KUBECTL_NAME.sha256" \
        "https://dl.k8s.io/$ver/bin/$SYS_OS_TYPE/amd64/kubectl$EXT.sha256"
      )
      
      [[ "$RES" != "200" ]] && {
        #~
        rm "$KUBECTL_NAME.sha256"
        
        _log_w 1 "Unable to download the kubectl checksum file"
        ask "Should I proceed anyway?" || {
          rm "kubectl.tmp"
          FATAL "Quitting"
        }
        _log_w 1 "kubectl checksum verification skipped by the user"
        COMMENT=" but not checked"
      }
      
      # VERIFY checksum
      [[ -f "$KUBECTL_NAME.sha256" ]] && {
        echo "$(<"$KUBECTL_NAME.sha256") kubectl.tmp" | _sha256sum --check || {
          rm "kubectl.tmp"
          FATAL "Checksum verification failed, operation interrupted"
        }
      }
      
      # FINALIZE THE NAME
      mv "kubectl.tmp" "$KUBECTL_NAME"
      chmod +x "$KUBECTL_NAME"
      _log_i 1 "kubectl \"$ver\" downloaded$COMMENT"
    else
      _log_i 1 "I already have a good version for this server (\"$ver\")"
    fi
    
    set_kubectl_command "$PWD/$KUBECTL_NAME"
    
    _log_i 1 "Ent profile configuration updated (run \"ent status\" for details)"
  ) || exit "$?"
}

# ######################################################################################################################
# ######################################################################################################################
# ######################################################################################################################

if [ "$1" = "--help" ] || [ "$1" == "" ]; then
  . s/_base.sh

  [ "$1" == "" ] && print_status_info
  print_ent_module_help "${BASH_SOURCE[0]}" "$2"
  exit 0
fi

[ "$1" = "--cmplt" ] && {
  . s/essentials.sh
  print_ent_module_sub-commands "${BASH_SOURCE[0]}"
  exit 0
}

. s/_base.sh
cd - > /dev/null || FATAL -t "internal error"

RUN "$@"
