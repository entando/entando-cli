#!/bin/bash
# shellcheck disable=SC2129

[[ "$1" == "--help" && "$2" == "--short" ]] && { echo -e "Runs diagnostics and aggregates the related info in a .tgz file"; exit 0; }
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
cd "$DIR/../.." || { echo "Internal error: unable to find the script source dir"; exit 1; }
. s/_base.sh


RUN() {
  _PARSE_OPTIONS "$@"
  _INITIALIZE
  _COLLECT_BASICS
  _COLLECT_K8S
  _FINALIZE
  _PACKAGE
}


########################################################################################################################
########################################################################################################################
########################################################################################################################

_QUEUE() {
  LAST_JOB="$!"
  ALL_GENERAL_JOBS+=("$LAST_JOB")
  $SEQUENTIAL && _GENERAL_WAIT
}

_GENERAL_WAIT() {
  wait <<<"${ALL_GENERAL_JOBS[@]}"
  ALL_GENERAL_JOBS=()
}

# shellcheck disable=SC2064
trap "pkill -TERM -P $$" exit

_log() {
  echo -e "$@" | _R
}

_log_d() {
  echo -e "$@" | _R --dbg
}

# Redirect printer
# Prints to stdout and in case to file
#
_R.P() {
  if [ -n "$1" ]; then
    printf "%s%s\n" "$2" "$3"
    $4 || printf "%s%s\n" "$2" "$3" 1>>"~$1"
  else
    echo "$3"
  fi
}

# Redirect helper
# manipulates a stream and prints it to the stdout and a summary file
#
# - Adds type indicator       (O: standard, E: error)
# - Adds process indicator    (PSORT subshell global variable)
# - Adds function name        (PFUN subshell global variable)
# - Writes a copy to file     (SUMMARY_FILE subshell global variable)
# 
# Options:
# --null:       suppress the output
# --err:        changes the type indicator to "E"
# --no-summary: skips the summary file
#
# shellcheck disable=2120
_R() {
  [ "$1" = "--null" ] && return 0
  local CH="O"; [ "$1" = "--err" ] && { CH="E";shift; }
  [ "$1" = "--dbg" ] && { CH="D";shift; }
  local NO_SUMMARY=false; [ "$1" = "--no-summary" ] && { NO_SUMMARY=true;shift; }
  local pfun="${PFUN:-ROOT}"
  pfun="${pfun/COLLECT./@}"  
  local pre=""
  ! $SEQUENTIAL && pre="$(printf "| %02d | %-20s | " "$PSORT" "$pfun")"
  pre="$(printf "| %02d | $CH | %-20s | " "$PSORT" "$pfun")"
  while IFS= read -r line; do
    _R.P "$SUMMARY_FILE" "$pre" "$line" "$NO_SUMMARY"
  done
  [[ -n $line ]] && _R.P "$SUMMARY_FILE" "$pre" "$line" "$NO_SUMMARY"
}

LOG_TITLE() {
  _log "\n## $*\n"
}

_COLLECT_BASICS() {
  LOG_TITLE "Current ENT"
  ent which 2>&1 | _R
  LOG_TITLE "Current ENT status"
  ent status | _R
  if [ -n "$NAMESPACE" ]; then
    _log "\n## ### NOTE ###"
    _log "NAMESPACE was forced to \"$NAMESPACE\" on ent diag parameters\n"
  fi
  
  # DNS rebinding protection TEST
  LOG_TITLE "DNS rebinding protection TEST"

  TP1="$(dig +short 192.168.1.1.nip.io)"
  TP2="$(dig +short 192.168.1.1.nip.io @8.8.8.8)"
  _log "# General Result:"
  if [ "$TP1" != "$TP2" ]; then
    _log "### WARNING ###"
    _log "# Your router or provider may be interfering with the DNS queries, try to set you DNS server to 8.8.8.8"
  else
    _log "OK"
  fi
  _log "# Details of Test:"
  _log "# - $TP1"
  _log "# - $TP2"
  _log "" 

  if $LOCALINFO; then
    # Local info
    LOG_TITLE "LOCAL INFO"
    _log "# Hostname"
    hostname -I | _R
    _log "# OS Info"
    lsb_release -a 2>/dev/null | _R
    # shellcheck disable=SC2002
    cat /etc/os-release | _R
  fi
}

_COLLECT_K8S() {
  PFUN="${FUNCNAME[1]}";PSORT=0
  LOG_TITLE "GENERAL START"
  
  local psort=0
  ((psort++)); COLLECT.K8S_BASICS "$psort" 
  ((psort++)); COLLECT.NODES_DESCRIBE "$psort" 
  ((psort++)); COLLECT.CRDs "$psort" 
  ((psort++)); COLLECT.NAMESPACE_BASICS "$psort" 
  ((psort++)); COLLECT.NAMESPACE_DESCRIBE "$psort" 
  ((psort++)); COLLECT.APP_TLS_INFO "$psort" 
  ((psort++)); COLLECT.INGRESSES "$psort" 
  ((psort++)); COLLECT.DEPLOYMENTS "$psort" 
  ((psort++)); COLLECT.CRs "$psort" 
  ((psort++)); COLLECT.PODS_DETAILS "$psort" 
  ((psort++)); COLLECT.ALL_EVENTS "$psort" 
  ((psort++)); COLLECT.EVENT_SEL "$psort" 
  
  LOG_TITLE "GENERAL COMPLETION WAIT"
  _GENERAL_WAIT
}

COLLECT.APP_TLS_INFO() {
  if ent tls --help &> /dev/null; then
    (
      # shellcheck disable=SC2030 disable=SC2031
      export PFUN="${FUNCNAME[0]}" PSORT="$1"
      
      LOG_TITLE "APP SHORT TLS CERT INSPECTION"
      (ent tls inspect --app --short 2>&1) | _R
      
      LOG_TITLE "APP FULL TLS CERT INSPECTION"
      ent tls inspect --app > "$APP_CERT_FILE"
    ) &
    _QUEUE
  fi
}

COLLECT.K8S_BASICS() {
  (
    # shellcheck disable=SC2030 disable=SC2031
    export PFUN="${FUNCNAME[0]}" PSORT="$1"
    
    LOG_TITLE "VERSIONS"
    ent kubectl version | _R
    _log "\n-done."
    
    if "$CLUSTER"; then
      LOG_TITLE "NODES list"
      ent kubectl get nodes | _R
    fi
   ) &
  _QUEUE
}

COLLECT.NAMESPACE_BASICS() {
  (
    # shellcheck disable=SC2030 disable=SC2031
    export PFUN="${FUNCNAME[0]}" PSORT="$1"
    #  App Images Config Map
    LOG_TITLE "NAMESPACE_BASICS"
    
    LOG_TITLE "~ APP IMAGES CONFIGMAP"
    ent app configmap | _R
    _log ""

    #  Operator Config Maps
    LOG_TITLE "~ OPERATOR CONFIGMAP"
    ent app operator-configmap --no-check | _R
    
    #  POD list
    LOG_TITLE "~ POD list"
    ent kubectl get pods | _R

    #  Running Images list 
    LOG_TITLE "~ RUNNING IMAGES"
    ent app images | _R

    _log "\n-done."
   ) &
  _QUEUE
}

COLLECT.CRDs() {
  (
    # shellcheck disable=SC2030 disable=SC2031
    export PFUN="${FUNCNAME[0]}" PSORT="$1"
    if "$CLUSTER"; then
      #  CRDs
      LOG_TITLE "CRDs list"
      ent kubectl get crd | _R
    
      if ! "$TOSTDOUT"; then
        LOG_TITLE "Entando CRDs full dump"
        
        if _pkg_ok "jq"; then
          ent kubectl get crd -o json \
              | _jq '.items[] | select(.spec.group=="entando.org")' 1> "$CRD_JSON_FILE"
        else
          _log "The CRD json dump was not collected, install \"jq\" for enabling this function" 
        fi
      fi
      
      _log "\n-done."
    fi
   ) &
  _QUEUE
}


COLLECT.CRs() {
  (
    # shellcheck disable=SC2030 disable=SC2031
    export PFUN="${FUNCNAME[0]}" PSORT="$1"
    LOG_TITLE "Entando Custom Resources"
    
    _log_d "> parallel execution started.."
    _dump_resources --crd \
      < <(echo ClusterServiceVersion; ent kubectl api-resources --verbs=list --namespaced -o name | grep -F ".entando.org";)  

    _log "\n-done."
   ) &
  _QUEUE
}

COLLECT.INGRESSES() {
  (
    # shellcheck disable=SC2030 disable=SC2031
    export PFUN="${FUNCNAME[0]}" PSORT="$1"
    LOG_TITLE "NAMESPACE INGRESSES"
    
    _log_d "> parallel execution started.."
    _dump_resources --crd "ingresses" <<<"ingresses"
      
    _log "\n-done."
   ) &
  _QUEUE
}

COLLECT.DEPLOYMENTS() {
  (
    # shellcheck disable=SC2030 disable=SC2031
    export PFUN="${FUNCNAME[0]}" PSORT="$1"
    LOG_TITLE "NAMESPACE DEPLOYMENTS"
    
    _log_d "> parallel execution started.."
    _dump_resources --crd "deployments" <<<"deployments"
      
    _log "\n-done."
   ) &
  _QUEUE
}

COLLECT.EVENT_SEL() {
  (
    # shellcheck disable=SC2030 disable=SC2031
    export PFUN="${FUNCNAME[0]}" PSORT="$1"
    # SELECTION OF EVENTS
    if "$CLUSTER"; then
      LOG_TITLE "SELECTION OF CLUSTER EVENTS"
      ent kubectl get events -A | grep -i -E "error|fail|warn" | _R
    else
      LOG_TITLE "SELECTION OF NAMESPACE EVENTS"
      ent kubectl get events | grep -i -E "error|fail|warn" | _R
    fi

    _log "\n-done."
   ) &
  _QUEUE
}

COLLECT.ALL_EVENTS() {
  # ALL NAMESPACE EVENTS
  (
    # shellcheck disable=SC2030 disable=SC2031
    export PFUN="${FUNCNAME[0]}" PSORT="$1"
    if ! "$TOSTDOUT"; then
      if "$CLUSTER"; then
        LOG_TITLE "ALL CLUSTER EVENTS"
        # shellcheck disable=SC2260
        {
          ent kubectl get events -A -o json > "$EVENTS_JSON_FILE" | _R
          ent kubectl get events -A > "$EVENTS_TXT_FILE" | _R
        }
      else
        LOG_TITLE "ALL NAMESPACE EVENTS"
        ent kubectl get events -o json > "$EVENTS_JSON_FILE"
        ent kubectl get events  > "$EVENTS_TXT_FILE"
      fi
      _log "\n-done."
    fi
   ) &
  _QUEUE
}

COLLECT.NAMESPACE_DESCRIBE() {
  # NAMESPACE DESCRIBE
  (
    # shellcheck disable=SC2030 disable=SC2031
    export PFUN="${FUNCNAME[0]}" PSORT="$1"
    if ! "$TOSTDOUT"; then
      LOG_TITLE "NAMESPACE DESCRIBE"
      ent kubectl describe namespace > "$NAMESPACE_DESC_TXT_FILE"
      _log "\n-done."
    fi
   ) &
  _QUEUE
}

COLLECT.NODES_DESCRIBE() {
  (
    # shellcheck disable=SC2030 disable=SC2031
    export PFUN="${FUNCNAME[0]}" PSORT="$1"
    # NODES DESCRIBE
    if ! "$TOSTDOUT"; then
      if "$CLUSTER"; then
        LOG_TITLE "NODES DESCRIBE"
        ent kubectl describe nodes > "$NODES_DESC_TXT_FILE"
        _log "\n-done."
      fi
    fi
   ) &
  _QUEUE
}

COLLECT.PODS_DETAILS() {
  (
    # shellcheck disable=SC2030 disable=SC2031
    export PFUN="${FUNCNAME[0]}" PSORT="$1"
    # ALL LOGS
    if ! "$TOSTDOUT"; then
      # PODs information collection
      LOG_TITLE "APP PODS LOGS DETAILS"
      _log_d "> parallel execution started.."

      for pod in $(ent kubectl get pods | awk 'NR>1' | awk '{print $1}'); do
        (
          _log "> POD: $pod"
          ent kubectl describe pods/"$pod" 1>"$pod.describe.txt"
          for co in $(ent kubectl get pods/"$pod" -o jsonpath='{.spec.containers[*].name}{"\n"}'); do
            _log ">\tCONTAINER: $co"
            ent kubectl logs pods/"$pod" -c "$co" 1>"$pod-$co.log"
            F="$pod-$co.previous.log"
            ent kubectl logs --previous pods/"$pod" -c "$co" 1>"$F" 2>/dev/null
            [ -f "$F" ] && [ ! -s "$F" ] && rm "$F"
          done
        )
      done
      
      sleep 0.2; _log_d "> waiting for completion.."
      wait < <(jobs -p)
      _log_d "> done."
      
      _log "\n-done."
    fi
   ) &
  _QUEUE
}

_dump_resources() {
  local QUIET=false;[ "$1" = "-q" ] && { QUIET=true;shift; } 
  if ! "$TOSTDOUT"; then
    local t="$1" i
    
    if [ "$t" = "--crd" ]; then
      (
        while IFS= read -r i; do
          _log ">\t$i"
          _dump_resources -q "$i" \
            < <(ent kubectl get "$i" -o jsonpath='{.items[*].metadata.name} ' | tr ' ' $'\n') &
        done
        
        $QUIET || { sleep 0.2; _log_d "> waiting for completion.."; }
        wait < <(jobs -p)
        $QUIET || _log_d "> done."
      )
    else
      (
        while IFS= read -r i; do
          if [ "$i" != "" ]; then
            _log ">\t$i"
            ent kubectl get "$t" "$i" -o yaml > "$i.$t.yaml" &
          fi
        done
          
        $QUIET || { sleep 0.2; _log_d "> waiting for completion.."; }
        wait < <(jobs -p)
        $QUIET || _log_d "> done."
      )
    fi
  fi
}

########################################################################################################################
########################################################################################################################
########################################################################################################################

_PARSE_OPTIONS() {
  HH="$(parse_help_option "$@")"; show_help_option "$HH"
  args_or_ask -h "$HH" -n -p NAMESPACE "--namespace/ext_ic_id//%sp the kubernetes namespace" "$@"
  args_or_ask -h "$HH" -n -F LOCALINFO '--localinfo///%sp the information of the localhost' "$@"
  args_or_ask -h "$HH" -n -F TOSTDOUT '--print///prints to stdout instead of writing a file' "$@"
  args_or_ask -h "$HH" -n -F DIRONLY '--dir///generates a dir instead of writing a file' "$@"
  args_or_ask -h "$HH" -n -F CLUSTER '--cluster///collects all the cluster event' "$@"
  args_or_ask -h "$HH" -n -F SEQUENTIAL '--sequential///disables the parallel execution' "$@"

  if ! "$TOSTDOUT"; then
    SUMMARY_FILE="summary.txt"
  else
    SUMMARY_FILE=""
    SEQUENTIAL=true
  fi

  CRD_JSON_FILE="crds.json"
  EVENTS_JSON_FILE="events.json"
  EVENTS_TXT_FILE="events.txt"
  NAMESPACE_DESC_TXT_FILE="namespace.describe.txt"
  NODES_DESC_TXT_FILE="nodes.describe.txt"
  APP_CERT_FILE="app-cert-inspection.txt"

  [ -n "$HH" ] && exit 0
}

_INITIALIZE() {
  if ! "$TOSTDOUT"; then
    NN="entando-diagdata-$(date -u '+%Y-%m-%dT%H-%M-%S%z')"
    TT="$HOME/.entando/reports/$NN"
    mkdir -p "$TT"
    __cd "$TT"
  
    echo "# $NN"
    echo ""
  fi
  
  [ -n "$SUMMARY_FILE" ] && _log "## ENT-DIAG FORMAT 0.3"
}

_FINALIZE() {
  [ -n "$SUMMARY_FILE" ] && {
    grep -v '^| [0-9]* | D |' "~$SUMMARY_FILE" | sort -s -k1.1,1.6 | cut -c 35- > "$SUMMARY_FILE"
  }
}

_PACKAGE() {
  if ! "$TOSTDOUT"; then
    echo "" 
    if ! $DIRONLY; then
      set +e
      __cd "$TT/.."
      tar cfz "$NN.tgz" "$NN"
      [ -f "$NN/$SUMMARY_FILE" ] && rm -rf "$NN"
      echo "## Collected diagdata available in archive \"${TT}.tgz\""
    else
      echo "## Collected diagdata available under dir \"${TT}\""
    fi
  fi
}

RUN "$@"
