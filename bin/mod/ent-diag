#!/bin/bash
# shellcheck disable=SC2129

[ "$1" = "--help" ] && echo -e "Runs some diagnostic and collects the related info in a tgz file" && exit 0

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
cd "$DIR/../.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

. s/_base.sh

HH="$(parse_help_option "$@")"; show_help_option "$HH"
args_or_ask ${HH:+"$HH"} -n -p NAMESPACE "--namespace/ext_ic_id//%sp the kubernetes namespace" "$@"
args_or_ask ${HH:+"$HH"} -n -F LOCALINFO '--localinfo///%sp the information of the localhost' "$@"
args_or_ask ${HH:+"$HH"} -n -F TOSTDOUT '--print///prints to stdout instead of writing a file' "$@"
args_or_ask ${HH:+"$HH"} -n -F DIRONLY '--dir///generates a dir instead of writing a file' "$@"
args_or_ask ${HH:+"$HH"} -n -F CLUSTER '--cluster///collects all the cluster event' "$@"

if ! "$TOSTDOUT"; then
  SUMMARY_FILE="summary.txt"
else
  SUMMARY_FILE=""
fi

CRD_JSON_FILE="crds.json"
EVENTS_JSON_FILE="events.json"
EVENTS_TXT_FILE="events.txt"
NAMESPACE_DESC_TXT_FILE="namespace.describe.txt"
NODES_DESC_TXT_FILE="nodes.describe.txt"

[ -n "$HH" ] && exit 0

LOG() {
  if [ -n "$SUMMARY_FILE" ]; then
    echo -e "\n$1" 1>&2
    echo -e "\n$1" 1>>"$SUMMARY_FILE"
  else
    echo -e "\n$1"
  fi
}

BASICS() {
  LOG "## Current ENT"
  ent which 2>&1
  LOG "## Current ENT status"
  ent status
  if [ -n "$NAMESPACE" ]; then
    LOG "\n## ### NOTE ###"
    LOG "## NAMESPACE was forced to \"$NAMESPACE\" on ent diag parameters\n"
  fi
  
  # DNS rebinding protection TEST
  LOG "## DNS rebinding protection TEST"

  TP1="$(dig +short 192.168.1.1.nip.io)"
  TP2="$(dig +short 192.168.1.1.nip.io @8.8.8.8)"
  echo "# General Result:"
  if [ "$TP1" != "$TP2" ]; then
    echo "### WARNING ###"
    echo "# Your router or provider may be interfering with the DNS queries, try to set you DNS server to 8.8.8.8"
  else
    echo "OK"
  fi
  echo "# Details of Test:"
  echo "# - $TP1"
  echo "# - $TP2"
  echo "" 

  if $LOCALINFO; then
    # Local info
    LOG "## LOCAL INFO"
    echo "# Hostname"
    hostname -I 2>&1
    echo "# OS Info"
    lsb_release -a 2>/dev/null
    cat /etc/os-release 2>&1
    echo "# Routes"
    ip r s 2>&1
  fi
}

BASICS_K8S() {
  if "$CLUSTER"; then
    LOG "## NODES list"
    _kubectl get nodes
  
    #  CRDs
    LOG "## CRDs list"
    ent kubectl get crd
   
    if ! "$TOSTDOUT"; then
      LOG "## Entando CRDs full dump"
      
      if command -v "jq" >/dev/null; then
        ent kubectl get crd -o json \
            | jq '.items[] | select(.spec.group=="entando.org")' 1> "$CRD_JSON_FILE"
      else
        echo "The CRD json dump was not collected, install \"jq\" for enabling this function" 1>&2 
      fi
    fi
  fi

  #  Config maps
  LOG "## APP IMAGES CONFIGMAP"
  ent app configmap
  echo ""

  LOG "## OPERATOR CONFIGMAP"
  ent app operator-configmap --no-check
  echo ""

  #  Images
  LOG "## RUNNING IMAGES"
  ent app images

  #  PODs
  LOG "## POD list"
  _kubectl get pods ${NAMESPACE:+-n "$NAMESPACE"}
  
  # SELECTION OF EVENTS
  if "$CLUSTER"; then
    LOG "## SELECTION OF CLUSTER EVENTS"
    _kubectl get events --all-namespaces | grep -i -E "error|fail|warn"
  else
    LOG "## SELECTION OF NAMESPACE EVENTS"
    _kubectl get events ${NAMESPACE:+-n "$NAMESPACE"} | grep -i -E "error|fail|warn"
  fi
  
  # ALL NAMESPACE EVENTS
  if ! "$TOSTDOUT"; then
    if "$CLUSTER"; then
      LOG "## ALL CLUSTER EVENTS"
      _kubectl get events --all-namespaces -o json > "$EVENTS_JSON_FILE"
      _kubectl get events --all-namespaces  > "$EVENTS_TXT_FILE"
    else
      LOG "## ALL NAMESPACE EVENTS"
      _kubectl get events ${NAMESPACE:+-n "$NAMESPACE"} -o json > "$EVENTS_JSON_FILE"
      _kubectl get events ${NAMESPACE:+-n "$NAMESPACE"}  > "$EVENTS_TXT_FILE"
    fi
  fi
  
  # NAMESPACE DESCRIBE
  if ! "$TOSTDOUT"; then
    LOG "## NAMESPACE DESCRIBE"
    _kubectl describe namespace > "$NAMESPACE_DESC_TXT_FILE"
  fi
}

FULL_K8S() {
  # NODES DESCRIBE
  if ! "$TOSTDOUT"; then
    if "$CLUSTER"; then
      LOG "## NODES DESCRIBE"
      _kubectl describe nodes > "$NODES_DESC_TXT_FILE"
    fi
  fi

  # ALL LOGS
  if ! "$TOSTDOUT"; then
    # PODs information collection
    LOG "## ALL APP LOGS" 1>&2
    
    for pod in $(_kubectl get pods ${NAMESPACE:+-n "$NAMESPACE"} | awk 'NR>1' | awk '{print $1}'); do
      echo "> POD: $pod" 1>&2
      _kubectl describe pods/"$pod" ${NAMESPACE:+-n "$NAMESPACE"} 1>"$pod.describe.txt" 2>&1
      for co in $(_kubectl get pods/"$pod" -o jsonpath='{.spec.containers[*].name}{"\n"}' ${NAMESPACE:+-n "$NAMESPACE"}); do
        echo -e ">\tCONTAINER: $co" 1>&2
        _kubectl logs pods/"$pod" -c "$co" ${NAMESPACE:+-n "$NAMESPACE"} 1>"$pod-$co.logs.txt" 2>&1
      done
    done
  fi
}


RUN() {
  # NODES
  if ! "$TOSTDOUT"; then
    NN="entando-diagdata-$(date -u '+%Y-%m-%dT%H-%M-%S%z')"
    TT="$HOME/.entando/reports/$NN"
    mkdir -p "$TT"
    __cd "$TT"
  
    echo "# $NN"
    echo ""
  fi
  
  if [ -n "$SUMMARY_FILE" ]; then
    {
      echo "## ENT-DIAG FORMAT 0.2"
      BASICS
      BASICS_K8S
      FULL_K8S
    } 1>>"$SUMMARY_FILE"
  else
    BASICS
    BASICS_K8S
    FULL_K8S
  fi
  
  if ! "$TOSTDOUT"; then
    echo "" 
    if ! $DIRONLY; then
      set +e
      __cd "$TT/.."
      tar cfz "$NN.tgz" "$NN"
      [ -f "$NN/$SUMMARY_FILE" ] && rm -rf "$NN"
      echo "## Collected diagdata available in archive \"${TT}.tgz\""
    else
      echo "## Collected diagdata available under dir \"${TT}\""
    fi
  fi
}

RUN "$@"