#!/bin/bash

#H::
#H:: Helps dealing with entando apps
#H::
#H:: Syntax:
#H::  - ent app {command} ...
#H::
#H:: Commands:

[[ "$1" == "--help" && "$2" == "--short" ]] && {
  echo -e "Helps managing an EntandoApp" && exit 0
}

[ "$1" = "--cmplt" ] && {
  . s/essentials.sh
  print_ent_module_sub-commands "${BASH_SOURCE[0]}"
  exit 0
}

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
cd "$DIR/../.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

. s/_base.sh

RUN() {
  HH="$(parse_help_option "$@")"

  [[ -n "$HH" && -z "$CMD" ]] && {
    print_ent_module_help "${BASH_SOURCE[0]}" "$2"
  }

  show_help_option "$HH" ":main"
  args_or_ask ${HH:+"$HH"} -a -n -- "CMD" '1///%sp command' "$@"

  args_or_ask ${HH:+"$HH"} -n -p NAMESPACE "--namespace/ext_ic_id//%sp the kubernetes namespace" "$@"

  [[ -n "$HH" && -z "$CMD" ]] && exit

  show_help_option "$HH" "\"$CMD\""

  case "$CMD" in
    "use") #H: selects the app context that ent should use
      args_or_ask ${HH:+"$HH"} -n -F "NO_AUTO_LOGIN" "--no-auto-login///Disable auto-login" "$@"
      args_or_ask ${HH:+"$HH"} -n -F "AUTO_YES" "--yes///Assumes yes for all yes-no questions" "$@"
      args_or_ask ${HH:+"$HH"} -n -F "AUTO_NO" "--no///Assumes no for all yes-no questions" "$@"
      args_or_ask ${HH:+"$HH"} -n -F "USE_NO_APPCTX" "--none///Assumes the global application context" "$@"
      [ -n "$HH" ] && exit 0
      shift
      APP_LOGIN_URL=""
      APP_LOGIN_TOKEN=""
      use_app_ctx "$@"
      app_ctx_auto_login
      ;;
    "stop") #H: stops the app associated to the the given app context
      [ -n "$HH" ] && exit 0
      if [ -n "$DESIGNATED_VM" ]; then
        multipass stop "$DESIGNATED_VM"
      else
        _log_e 0 "This command only works with managed VMs"
      fi
    ;;
    "start") #H: starts the app associated to the the given app context
      [ -n "$HH" ] && exit 0
      if [ -n "$DESIGNATED_VM" ]; then
        multipass start "$DESIGNATED_VM"
      else
        _log_e 0 "This command only works with managed VMs"
      fi
    ;;
    "delete") #H: delete the given app context
      args_or_ask ${HH:+"$HH"} -n -F "AUTO_YES" "--yes///Assumes yes for all yes-no questions" "$@"
      [ -n "$HH" ] && exit 0
      shift

      if [ -n "$DESIGNATED_VM" ]; then
        _log_w 0 "This application context is associated to a managed VM"
        if $AUTO_YES || ask "Should I remove the VM too?"; then
          multipass delete "$DESIGNATED_VM"
          _log_i 0 "VM deleted, to completely remove it run multipass purge"
        fi
        delete_app_ctx "$THIS_APP_CTX"
      else
        delete_app_ctx "$@"
      fi

      ;;
    "list") #H: prints a list of the available app contexts
      [ -n "$HH" ] && exit 0
      shift
      list_app_ctx "$@"
      ;;
    "login") #H: logins to an application context using a token
      [ -n "$HH" ] && exit 0
      shift
      login_to_app_ctx "$@"
      ;;
    "images") #H: print the images running in the current EntandoApp
      print_images "$@"
      ;;
    "configmap") #H: prints the configmap used to deploy the current EntandoApp
      print_configmap "$@"
      ;;
    "status") #H: prints status information about the current EntandoApp
      local WATCH
      determine_namespace ENTANDO_NAMESPACE "$@"
      args_or_ask ${HH:+"$HH"} -n -p ENTANDO_APPNAME "--appname/ext_ic_id//%sp the application name" "$@"
      args_or_ask ${HH:+"$HH"} -n -F WATCH "--watch///" "$@"

      [ -n "$HH" ] && exit 0

      if $WATCH; then
        ent app-info watch "$ENTANDO_NAMESPACE" "$ENTANDO_APPNAME"
      else
        ent app-info "$ENTANDO_NAMESPACE" "$ENTANDO_APPNAME"
      fi
      ;;
    "")
      [ -n "$HH" ] && exit 0
      _log_i 2 "The current application context is:"
      echo "$ENTANDO_CURRENT_APP_CTX"
      _log_i 2 "The available application contexts are:"
      list_app_ctx "$@"
      ;;
    *)
      [ -n "$HH" ] && exit 0
      FATAL "Unknown command \"$CMD\""
      ;;
  esac
}

print_configmap() {
  [ -n "$HH" ] && exit 0
  _kubectl ${NAMESPACE:+-n "$NAMESPACE"} get configmap "entando-docker-image-info" -o yaml \
    | perl -p0e 's/.*\n(data:.*)/\1/msg' | perl -p0e 's/\n[^ ].*//msg'
}

print_images() {
  local FILTER="$ENTANDO_IMAGES_FILTER"
  args_or_ask ${HH:+"$HH"} -n -f '--all/// prints all the images' "$@" && {
    FILTER=".*"
  }

  [ -n "$HH" ] && exit 0
  # shellcheck disable=SC2021 disable=SC2155
  local RES=$(
    _kubectl ${NAMESPACE:+-n "$NAMESPACE"} get pods -o jsonpath="{..image}" \
      | \tr -s '[[:space:]]' '\n' | \sort -u \
      | \grep "$FILTER"
  )
  [ -z "$RES" ] && FATAL "Unable fetch the images list"

  echo "$RES"
  echo ""
  if $OS_WIN; then
    echo "$RES" | sha256sum
  else
    echo "$RES" | shasum -a 256
  fi
}

use_app_ctx() {
  # shellcheck disable=SC2034
  local application_context
  local apps_base_dir="$ENTANDO_HOME/apps"

  $USE_NO_APPCTX && application_context="--none"
  args_or_ask ${HH:+"$HH"} -a -p -n -- "application_context" '1///%sp application context (or --none)' "$@"

  ENTANDO_CURRENT_APP_CTX=""
  # shellcheck disable=SC2034
  ENTANDO_CURRENT_APP_CTX_HOME=""

  (
    if $USE_NO_APPCTX; then
      save_cfg_value "ENTANDO_CURRENT_APP_CTX" "" "$ENTANDO_GLOBAL_CFG"
      save_cfg_value "ENTANDO_CURRENT_APP_CTX_HOME" "" "$ENTANDO_GLOBAL_CFG"
    else
      # shellcheck disable=SC2030
      local APP_CTX
      if [ "$application_context" = "" ]; then
        __cd "$apps_base_dir"
        # shellcheck disable=SC2035
        map-from-stdin "application_context" $'\n\r' < <(ls -d *)
        args_or_ask__a_map "application_context" -a ${HH:+"$HH"} "APP_CTX" "1" "Select the application context" "$@"
      else
        APP_CTX="$application_context"
      fi

      local app_dir="$ENTANDO_HOME/apps/$APP_CTX"

      if [ ! -d "$app_dir" ]; then
        _log_w 0 "Application context \"$APP_CTX\" not found"
        $AUTO_NO && EXIT_UE "Auto Interrupted due to auto-no"
        $AUTO_YES || ask "Should I create it?" || EXIT_UE "User interrupted"
        mkdir -p "${app_dir}/w"
        _log_i 0 "Application context \"$APP_CTX\" created"
        #cp -r "$ENT_WORK_DIR" "${app_dir}" || true
        #_log_i 0 "New configuration and state created under \"$APP_CTX\""
        local CFG="$app_dir/w/.cfg"
        set_or_ask ENTANDO_APPNAME "" "Please provide the application name" ""
        set_or_ask DEFAULT_NAMESPACE "" "Please provide the namespace"
        save_cfg_value ENTANDO_APPNAME "$ENTANDO_APPNAME" "$CFG"
        save_cfg_value DEFAULT_NAMESPACE "$DEFAULT_NAMESPACE" "$CFG"
        save_cfg_value ENTANDO_NAMESPACE "$DEFAULT_NAMESPACE" "$CFG"
      fi
      save_cfg_value "ENTANDO_CURRENT_APP_CTX" "${APP_CTX}" "$ENTANDO_GLOBAL_CFG"
      save_cfg_value "ENTANDO_CURRENT_APP_CTX_HOME" "${app_dir}" "$ENTANDO_GLOBAL_CFG"
    fi

    true
  ) && {
    reload_cfg "$ENTANDO_GLOBAL_CFG"
    if [ -n "$ENTANDO_CURRENT_APP_CTX" ]; then
      activate_application_workdir
    else
      activate_ent_default_workdir
    fi
    save_cfg_value "THIS_APP_CTX" "${ENTANDO_CURRENT_APP_CTX}"
    ENT_KUBECTL_CMD=""
    ENABLE_AUTOLOGIN=""
    reload_cfg
    setup_kubectl
  }
}

delete_app_ctx() {
  # shellcheck disable=SC2034
  local application_context
  local apps_base_dir="$ENTANDO_HOME/apps"

  (
    local APP_CTX
    __cd "$apps_base_dir"
    # shellcheck disable=SC2035
    map-from-stdin "application_context" $'\n\r' < <(ls -d *)
    args_or_ask__a_map "application_context" -a ${HH:+"$HH"} "APP_CTX" "1" "Select the application context" "$@"
    [ ! -d "$APP_CTX" ] && FATAL "Application not found"
    [ ! -d "$APP_CTX/w" ] && FATAL "Invalid application context dir"
    _log_w 0 "Application context \"$APP_CTX\" found"
    $AUTO_YES || ask "Should I really delete it?" || EXIT_UE "User interrupted"
    rm -rf "$APP_CTX"
    _log_i 0 "Application context \"$APP_CTX\" deleted"

    save_cfg_value "THIS_APP_CTX" ""
    save_cfg_value "ENTANDO_CURRENT_APP_CTX" "" "$ENTANDO_GLOBAL_CFG"
    save_cfg_value "ENTANDO_CURRENT_APP_CTX_HOME" "" "$ENTANDO_GLOBAL_CFG"
    true
  ) && {
    reload_cfg "$ENTANDO_GLOBAL_CFG"
    _log_i 0 "Current application context: $THIS_APP_CTX"
  }
}

list_app_ctx() {
  # shellcheck disable=SC2034
  local application_context
  local apps_base_dir="$ENTANDO_HOME/apps"

  (
    __cd "$apps_base_dir"
    # shellcheck disable=SC2035
    stdin_to_arr $'\n\r' application_context < <(ls -d *)

    for file in "${application_context[@]}"; do
      echo "$file"
    done
  )
}

login_to_app_ctx() {
  local CACHED
  args_or_ask ${HH:+"$HH"} -F -- "CACHED" "--cached///%sp authentication token" "$@"

  if ! $CACHED; then
    args_or_ask ${HH:+"$HH"} -a -p -- "APP_LOGIN_URL" '1///%sp URL' "$@"
    args_or_ask ${HH:+"$HH"} -- "APP_LOGIN_TOKEN" "--token///%sp authentication token" "$@"
    [[ -n "$HH" && -z "$CMD" ]] && exit
    _kubectl login "$APP_LOGIN_URL" --token="$APP_LOGIN_TOKEN"
    save_cfg_value "APP_LOGIN_URL" "$APP_LOGIN_URL"
    save_cfg_value "APP_LOGIN_TOKEN" "$APP_LOGIN_TOKEN"
  else
    [[ -n "$HH" && -z "$CMD" ]] && exit
    [[ -z "$APP_LOGIN_URL" || -z "$APP_LOGIN_TOKEN" ]] && FATAL "Credential cache missing or incomplete"
    _kubectl login "$APP_LOGIN_URL" --token="$APP_LOGIN_TOKEN"
  fi
}

app_ctx_auto_login() {
  if ! $NO_AUTO_LOGIN  && login_supported && [[ -n "$APP_LOGIN_URL" && -n "$APP_LOGIN_TOKEN" ]]; then
    _log_i 0 "Autologin to \"$APP_LOGIN_URL\""
    _kubectl login "$APP_LOGIN_URL" --token="$APP_LOGIN_TOKEN" || {
      _log_w 0 "AutoLogin failed, clearing the credentials cache"
      APP_LOGIN_TOKEN=""
      save_cfg_value "APP_LOGIN_TOKEN" ""
    }
  fi
}

login_supported() {
  if [ "$ENT_KUBECTL_CMD" = "oc" ] && "${ENABLE_AUTOLOGIN:-true}" != "false"; then
    return 0
  else
    if ${ENABLE_AUTOLOGIN:-false}; then
      return 0
    else
      return 1
    fi
  fi
}

ENTANDO_IMAGES_FILTER=""
ENTANDO_IMAGES_FILTER+="entando-component-manager\|"
ENTANDO_IMAGES_FILTER+="entando-de-app-wildfly\|"
ENTANDO_IMAGES_FILTER+="entando-k8s-app-controller\|"
ENTANDO_IMAGES_FILTER+="entando-k8s-app-plugin-link-controller\|"
ENTANDO_IMAGES_FILTER+="entando-k8s-cluster-infrastructure-controller\|"
ENTANDO_IMAGES_FILTER+="entando-k8s-composite-app-controller\|"
ENTANDO_IMAGES_FILTER+="entando-k8s-controller-coordinator\|"
ENTANDO_IMAGES_FILTER+="entando-k8s-dbjob\|"
ENTANDO_IMAGES_FILTER+="entando-k8s-keycloak-controller\|"
ENTANDO_IMAGES_FILTER+="entando-k8s-plugin-controller\|"
ENTANDO_IMAGES_FILTER+="entando-k8s-service\|"
ENTANDO_IMAGES_FILTER+="entando-keycloak\|"
ENTANDO_IMAGES_FILTER+="entando-plugin-sidecar"

RUN "$@"
