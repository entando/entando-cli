#!/bin/bash

#H::
#H:: Helps dealing with entando apps
#H::
#H:: Syntax:
#H::  - ent app {command} ...
#H::
#H:: Commands:

[[ "$1" == "--help" && "$2" == "--short" ]] && {
  echo -e "Helps managing an EntandoApp" && exit 0
}

[ "$1" = "--cmplt" ] && {
  . s/essentials.sh
  print_ent_module_sub-commands "${BASH_SOURCE[0]}"
  exit 0
}

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
cd "$DIR/../.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

. s/_base.sh

RUN() {
  HH="$(parse_help_option "$@")"

  show_help_option "$HH" ":main"
  args_or_ask ${HH:+"$HH"} -a -n -- "CMD" '1///%sp command' "$@"
  args_or_ask ${HH:+"$HH"} -n -p NAMESPACE "--namespace/ext_ic_id//%sp the kubernetes namespace" "$@"

  show_help_option "$HH" "$CMD"

  case "$CMD" in
  "use") #H: selects the application profile that ent should use
    args_or_ask ${HH:+"$HH"} -n -F "AUTO_YES" "--yes///Assumes yes for all yes-no questions" "$@"
    args_or_ask ${HH:+"$HH"} -n -F "AUTO_NO" "--no///Assumes no for all yes-no questions" "$@"
    args_or_ask ${HH:+"$HH"} -n -F "USE_NO_APP_PROFILE" "--none///Assumes the global application profile" "$@"
    args_or_ask ${HH:+"$HH"} -F USE_CURRENT_DIR "-l///Uses the local dir as based app dir" "$@"
    [ -n "$HH" ] && exit 0
    shift
    reset_kubectl_mode --mem
    use_app_profile "$@"

    ! $USE_NO_APP_PROFILE && {
      app_profile_auto_attach
    }
    ;;
  "first-use-readme") #H: prints the first-use readme
    print_first_use_readme
    ;;
  "new") #H: created a new application profile
    shift
    new_app_profile "$@"
    ;;
  "set") #H: created a new application profile
    shift
    setup_curr_app_profile "$@"
    ;;
  "stop") #H: stops the app associated with the the given application profile
    [ -n "$HH" ] && exit 0
    if [ -n "$DESIGNATED_VM" ]; then
      multipass stop "$DESIGNATED_VM"
    else
      _log_e 0 "This command only works with managed VMs"
    fi
    ;;
  "start") #H: starts the app associated with the the given application profile
    [ -n "$HH" ] && exit 0
    if [ -n "$DESIGNATED_VM" ]; then
      multipass start "$DESIGNATED_VM"
    else
      _log_e 0 "This command only works with managed VMs"
    fi
    ;;
  "delete") #H: delete the given application profile
    args_or_ask ${HH:+"$HH"} -n -F "AUTO_YES" "--yes///Assumes yes for all yes-no questions" "$@"
    args_or_ask ${HH:+"$HH"} -F USE_CURRENT_DIR "-l///Uses the local dir as based app dir" "$@"
    [ -n "$HH" ] && exit 0
    shift
    delete_app_profile "$@"
    ;;
  "list") #H: prints a list of the available application profiles
    args_or_ask ${HH:+"$HH"} -F USE_CURRENT_DIR "-l///Uses the local dir as based app dir" "$@"
    [ -n "$HH" ] && exit 0
    shift
    list_app_profiles "$@"
    ;;
  "link") #H: links the current application profile to a kube context
    shift
    link_kube_context "$1"
    ;;
  "images") #H: print the images running in the current EntandoApp
    print_images "$@"
    ;;
  "configmap") #H: prints the configmap used to deploy the current EntandoApp
    print_configmap "$@"
    ;;
  "status") #H: prints status information about the current EntandoApp
    local WATCH
    determine_namespace ENTANDO_NAMESPACE "$@"
    args_or_ask ${HH:+"$HH"} -n -p ENTANDO_APPNAME "--appname/ext_ic_id//%sp the application name" "$@"
    args_or_ask ${HH:+"$HH"} -n -F WATCH "--watch///" "$@"

    [ -n "$HH" ] && exit 0

    if $WATCH; then
      ent app-info watch "$ENTANDO_NAMESPACE" "$ENTANDO_APPNAME"
    else
      ent app-info "$ENTANDO_NAMESPACE" "$ENTANDO_APPNAME"
    fi
    ;;
  "")
    args_or_ask ${HH:+"$HH"} -F USE_CURRENT_DIR "-l///Uses the local dir as based app dir" "$@"
    [ -n "$HH" ] && exit 0
    print_current_app_profile_info
    _log_i 2 "The available application profiles are:"
    list_app_profiles "$@"
    ;;
  *)
    [ -n "$HH" ] && exit 0
    FATAL "Unknown command \"$CMD\""
    ;;
  esac
}

print_configmap() {
  [ -n "$HH" ] && exit 0
  _kubectl ${NAMESPACE:+-n "$NAMESPACE"} get configmap "entando-docker-image-info" -o yaml |
    perl -p0e 's/.*\n(data:.*)/\1/msg' | perl -p0e 's/\n[^ ].*//msg'
}

print_images() {
  local FILTER="${ENTANDO_STANDARD_IMAGES[*]}"
  FILTER="${FILTER// /\\|}"
  args_or_ask ${HH:+"$HH"} -n -f '--all/// prints all the images' "$@" && {
    FILTER=".*"
  }

  [ -n "$HH" ] && exit 0
  # shellcheck disable=SC2021 disable=SC2155
  local RES=$(
    _kubectl ${NAMESPACE:+-n "$NAMESPACE"} get pods -o jsonpath="{..image}" |
      \tr -s '[[:space:]]' '\n' | \sort -u |
      \grep "$FILTER"
  )
  [ -z "$RES" ] && FATAL "Unable fetch the images list"

  echo "$RES"
  echo ""
  if $OS_WIN; then
    echo "$RES" | sha256sum
  else
    echo "$RES" | shasum -a 256
  fi
}

setup_curr_app_profile() {
  HH="$(parse_help_option "$@")"
  args_or_ask ${HH:+"$HH"} ENTANDO_APPNAME "--appname/ext_ic_id/$APP_PROFILE/%sp EntandoApp name" "$@" && {
    save_cfg_value ENTANDO_APPNAME "$ENTANDO_APPNAME"
  }
  args_or_ask ${HH:+"$HH"} ENTANDO_NAMESPACE "--namespace/ext_ic_id/$APP_PROFILE/%sp default namespace" "$@" && {
    save_cfg_value ENTANDO_NAMESPACE "$ENTANDO_NAMESPACE"
  }
  [ -n "$HH" ] && exit 0
}

use_app_profile() {
  # shellcheck disable=SC2034
  local application_profile
  local apps_base_dir

  if $USE_CURRENT_DIR; then
    apps_base_dir="$ENTANDO_CALLER_PWD/.ent/apps"
  else
    apps_base_dir="$ENTANDO_HOME/apps"
  fi

  $USE_NO_APP_PROFILE && application_profile="--none"
  args_or_ask ${HH:+"$HH"} -a -p -n -- "application_profile" '1///%sp application profile (or --none)' "$@"

  DESIGNATED_APP_PROFILE=""
  # shellcheck disable=SC2034
  DESIGNATED_APP_PROFILE_HOME=""

  if $USE_NO_APP_PROFILE; then
    save_cfg_value "DESIGNATED_APP_PROFILE" "" "$ENTANDO_GLOBAL_CFG"
    save_cfg_value "DESIGNATED_APP_PROFILE_HOME" "" "$ENTANDO_GLOBAL_CFG"
    activate_designated_workdir
    return 0
  else
    (
      # shellcheck disable=SC2030
      __cd "$apps_base_dir"
      # shellcheck disable=SC2035

      local tmp_app_profile
      select_application_profile tmp_app_profile "$application_profile"

      local app_dir="$apps_base_dir/$tmp_app_profile"

      if [ ! -d "$app_dir" ]; then
        _log_w 0 "Application profile \"$tmp_app_profile\" not found"
        $AUTO_NO && EXIT_UE "Auto Interrupted due to auto-no"
        $AUTO_YES || ask "Should I create it?" || EXIT_UE "User interrupted"
        new_app_profile "$tmp_app_profile"
      fi

      save_cfg_value "DESIGNATED_APP_PROFILE" "${tmp_app_profile}" "$ENTANDO_GLOBAL_CFG"
      save_cfg_value "DESIGNATED_APP_PROFILE_HOME" "${app_dir}" "$ENTANDO_GLOBAL_CFG"
      true
    ) || return $?

    reload_cfg "$ENTANDO_GLOBAL_CFG"
    set_curr_app_profile "$DESIGNATED_APP_PROFILE" "$DESIGNATED_APP_PROFILE_HOME"
    activate_designated_workdir

    print_current_app_profile_info -v

    ${APP_PROFILE_NEVER_USED:-false} && {
      save_cfg_value APP_PROFILE_NEVER_USED ""
      print_first_use_readme
    }
  fi
}

_list_app_profiles() {
  local filter
  HH="$(parse_help_option "$@")"
  show_help_option "$HH"
  args_or_ask ${HH:+"$HH"} -n -a -- filter '1///filter' "$@"
  [ -n "$HH" ] && exit 0

  if [ -n "$filter" ]; then
    find . -maxdepth 1 ! -path . -printf '%f\n' | grep "$filter"
  else
    find . -maxdepth 1 ! -path . -printf '%f\n'
  fi
}

select_application_profile() {
  local res_var="$1";shift
  local application_profile="$1";shift
  local LST
  stdin_to_arr $'\n\r' LST < <(list_app_profiles "$application_profile")

  if [ "${#LST[@]}" -le 0 ]; then
    [ -n "$application_profile" ] && FATAL "No application profile was found with the provided data"
    FATAL "No application profile was found"
  fi

  select_one -s "Application Profile" "${LST[@]}"
  # shellcheck disable=SC2154
  _set_var "$res_var" "$select_one_res_alt"
}

parse_basic_app_profile_args() {
  local from="$1"
  shift
  args_or_ask ${HH:+"$HH"} -a ENTANDO_APPNAME "$((from + 0))/ext_ic_id/$APP_PROFILE/%sp EntandoApp name" "$@"
  args_or_ask ${HH:+"$HH"} -a ENTANDO_NAMESPACE "$((from + 1))/ext_ic_id/$APP_PROFILE/%sp default namespace" "$@"
}

new_app_profile() {
  HH="$(parse_help_option "$@")"
  args_or_ask ${HH:+"$HH"} -a APP_PROFILE "1/ext_ic_id//%sp application profile name" "$@"
  args_or_ask ${HH:+"$HH"} -n -F AUTO_USE \
    "--auto-use//true/%sp if true (default) automatically switches to the new application profile" "$@"
  args_or_ask ${HH:+"$HH"} -F USE_CURRENT_DIR "-l///%sp uses the local dir as based app dir" "$@"
  parse_basic_app_profile_args 2 "$@"
  [ -n "$HH" ] && exit 0
  # ~~~~~~~~~~~~~~

  local app_dir
  if $USE_CURRENT_DIR; then
    app_dir="$ENTANDO_CALLER_PWD/.ent/apps/$APP_PROFILE"
  else
    app_dir="$ENTANDO_HOME/apps/$APP_PROFILE"
  fi

  [ -d "${app_dir}" ] && FATAL "Application profile \"$APP_PROFILE\" already exists under dir: \"$app_dir\""
  mkdir -p "${app_dir}/w"
  chmod 700 "$ENTANDO_ENT_HOME/w"
  find "$ENTANDO_ENT_HOME/w" -maxdepth 1 -mindepth 1 -exec chmod 600 {} \;
  _log_i 0 "Application profile \"$APP_PROFILE\" created"

  local cfg_file="$app_dir/w/.cfg"
  save_cfg_value THIS_APP_PROFILE "$APP_PROFILE" "$cfg_file"
  save_cfg_value ENTANDO_APPNAME "$ENTANDO_APPNAME" "$cfg_file"
  save_cfg_value ENTANDO_NAMESPACE "$ENTANDO_NAMESPACE" "$cfg_file"

  if $AUTO_USE; then
    set_curr_app_profile "$APP_PROFILE" "$app_dir"
    _log_i 0 "Application profile \"$APP_PROFILE\" activated"
    activate_designated_workdir
    print_first_use_readme
  else
    save_cfg_value APP_PROFILE_NEVER_USED "true" "$cfg_file"
  fi
}

print_first_use_readme() {
  {
    echo ""
    print_hr
    MSG="PLEASE README:"
    MSG+=$'\n'
    MSG+=$'\n'"The kubectl \"mode\" is set to automatic for this profile,"
    MSG+=" which means that I'll try to adapt to your system."
    MSG+=$'\n'"However, should that not be enough, you have these options:"
    ((i++))
    MSG+=$'\n'"~"
    MSG+=$'\n'"$i) ATTACH TO A MANAGED VM:"
    MSG+=$'\n'"   ent attach-vm {vm-name}"
    ((i++))
    MSG+=$'\n'"~"
    MSG+=$'\n'"$i) ATTACH TO A KUBECONFIG:"
    MSG+=$'\n'"   ent attach-kubeconfig {kubeconfig-file}"
    ((i++))
    MSG+=$'\n'"~"
    MSG+=$'\n'"$i) AND/OR SELECT A CONTEXT TO USE:"
    MSG+=$'\n'"   ent list-kube-contexts"
    MSG+=$'\n'"   ent app link {context-name}"
    ((i++))
    MSG+=$'\n'"~"
    MSG+=$'\n'"$i) AND/OR PROVIDE A CUSTOM COMMAND:"
    MSG+=$'\n'"   ent set-kubectl-cmd \"{command}\" [--kubeconfig={config}]"
    echo "$MSG"
    print_hr
    echo ""
  } 1>&2
}

delete_app_profile() {
  # shellcheck disable=SC2034
  local application_profile
  local apps_base_dir
  if $USE_CURRENT_DIR; then
    apps_base_dir="$ENTANDO_CALLER_PWD/.ent/apps"
  else
    apps_base_dir="$ENTANDO_HOME/apps"
  fi

  local APP_PROFILE
  __cd "$apps_base_dir"
  # shellcheck disable=SC2035
  map-from-stdin "application_profile" $'\n\r' < <(ls -d * 2>/dev/null)
  args_or_ask_from_list "application_profile" -m -a ${HH:+"$HH"} APP_PROFILE 1 "any" \
    "application profile" "Select the application profile" "$@"
  [ ! -d "$APP_PROFILE" ] && FATAL "Application profile not found"
  [ ! -d "$APP_PROFILE/w" ] && FATAL "Invalid application profile dir"

  (
    _log_w 0 "Application profile \"$APP_PROFILE\" found"
    $AUTO_YES || ask "Should I really delete it?" || EXIT_UE "User interrupted"
    ##########
    # shellcheck disable=SC2034
    # shellcheck disable=SC2030
    (
      DESIGNATED_APP_PROFILE="$APP_PROFILE"
      DESIGNATED_APP_PROFILE_HOME="$apps_base_dir/$DESIGNATED_APP_PROFILE"
      activate_application_workdir
      reload_cfg

      if [ -n "$DESIGNATED_VM" ]; then
        _log_w 0 "This application profile is associated with a managed VM"
        if $AUTO_YES || ask "Should I remove the VM too?"; then
          multipass delete "$DESIGNATED_VM"
          _log_i 0 "VM deleted, to completely remove it run \"multipass purge\""
        fi
      fi
    )
    ##########
    rm -rf "$APP_PROFILE"
    _log_i 0 "Application profile \"$APP_PROFILE\" deleted"

    save_cfg_value "DESIGNATED_APP_PROFILE" "" "$ENTANDO_GLOBAL_CFG"
    save_cfg_value "DESIGNATED_APP_PROFILE_HOME" "" "$ENTANDO_GLOBAL_CFG"
    true
  ) && {
    reload_cfg "$ENTANDO_GLOBAL_CFG"
    if [ "$APP_PROFILE" = "$THIS_APP_PROFILE" ]; then
      THIS_APP_PROFILE=""
      save_cfg_value "DESIGNATED_APP_PROFILE" "" "$ENTANDO_GLOBAL_CFG"
      save_cfg_value "DESIGNATED_APP_PROFILE_HOME" "" "$ENTANDO_GLOBAL_CFG"
    fi
    print_current_app_profile_info
  }
}

list_app_profiles() {
  # shellcheck disable=SC2034
  local application_profile
  if $USE_CURRENT_DIR; then
    apps_base_dir="$ENTANDO_CALLER_PWD/.ent/apps"
  else
    apps_base_dir="$ENTANDO_HOME/apps"
  fi

  (
    __cd "$apps_base_dir"
    _list_app_profiles "$@"
  )
}

select_kube_context() {
  local res_var="$1";shift
  local kube_context="$1";shift
  local LST
  stdin_to_arr $'\n\r' LST < <(list_kube_contexts "$kube_context")

  if [ "${#LST[@]}" -le 0 ]; then
    [ -n "$kube_context" ] && FATAL "No kube context was found with the provided data"
    FATAL "No kube context was found"
  fi

  select_one -s "Kube Context" "${LST[@]}"
  # shellcheck disable=SC2154
  _set_var "$res_var" "$select_one_res_alt"
}

link_kube_context() {
  local kube_context use_def
  args_or_ask ${HH:+"$HH"} -F -n -- use_def '--default///selects the default kube-context' "$@"

  if $use_def; then
    args_or_ask -n -a -- kube_context '1///' "$@" && {
      FATAL "It's not allowed to provide \"--default\" and an explicit kube context simultaneously"
    }
    [ -n "$HH" ] && exit 0
    DESIGNATED_KUBECTX=""
    save_cfg_value "DESIGNATED_KUBECTX" "$DESIGNATED_KUBECTX"
  else
    args_or_ask ${HH:+"$HH"} -n -a -- kube_context '1///%spkubernetes context pattern (or --default)' "$@"
    [ -n "$HH" ] && exit 0
    local RES
    select_kube_context RES "$kube_context"
    [ -n "$HH" ] && exit 0
    DESIGNATED_KUBECTX="$RES"
    save_cfg_value "DESIGNATED_KUBECTX" "$DESIGNATED_KUBECTX"
  fi
}

app_profile_auto_attach() {
  # shellcheck disable=SC2031
  if [ -n "$DESIGNATED_VM" ]; then
    ent attach-vm "$DESIGNATED_VM"
  else
    [ -n "$DESIGNATED_KUBECONFIG" ] && save_cfg_value "DESIGNATED_KUBECONFIG" "$DESIGNATED_KUBECONFIG"
    [ -n "$DESIGNATED_KUBECTX" ] && save_cfg_value "DESIGNATED_KUBECTX" "$DESIGNATED_KUBECTX"
    [ -n "$ENT_KUBECTL_CMD" ] && save_cfg_value "ENT_KUBECTL_CMD" "$ENT_KUBECTL_CMD"
  fi
}

RUN "$@"
