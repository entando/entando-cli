#!/bin/bash

#H::
#H:: Helps dealing with entando apps
#H::
#H:: Syntax:
#H::  - ent app {command} ...
#H::
#H:: Commands:

[[ "$1" == "--help" && "$2" == "--short" ]] && {
  echo -e "Helps managing an EntandoApp" && exit 0
}

[ "$1" = "--cmplt" ] && {
  . s/essentials.sh
  print_ent_module_sub-commands "${BASH_SOURCE[0]}"
  exit 0
}

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
cd "$DIR/../.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

. s/_base.sh

RUN() {
  HH="$(parse_help_option "$@")"

  show_help_option "$HH" ":main"
  args_or_ask ${HH:+"$HH"} -a -n -- "CMD" '1///%sp command' "$@"
  args_or_ask ${HH:+"$HH"} -n -p NAMESPACE "--namespace/ext_ic_id//%sp the kubernetes namespace" "$@"

  [[ -n "$HH" || -z "$CMD" ]] && {
    print_ent_module_help "${BASH_SOURCE[0]}" "$2"
    exit 0
  }

  show_help_option "$HH" "$CMD"

  case "$CMD" in
  "images") #H: print the images running in the current EntandoApp
    print_images "$@"
    ;;
  "configmap") #H: prints the configmap used to deploy the current EntandoApp
    print_configmap "$@"
    ;;
  "status") #H: prints status information about the current EntandoApp
    local WATCH
    determine_namespace ENTANDO_NAMESPACE "$@"
    args_or_ask ${HH:+"$HH"} -n -p ENTANDO_APPNAME "--appname/ext_ic_id//%sp the application name" "$@"
    args_or_ask ${HH:+"$HH"} -n -F WATCH "--watch///" "$@"

    [ -n "$HH" ] && exit 0

    if $WATCH; then
      ent app-info watch "$ENTANDO_APPNAME" "$ENTANDO_NAMESPACE"
    else
      ent app-info "$ENTANDO_APPNAME" "$ENTANDO_NAMESPACE"
    fi
    ;;
  "")
    [ -z "$HH" ] && "${BASH_SOURCE[0]}" --help
    ;;
  *)
    [ -n "$HH" ] && exit 0
    FATAL "Unknown command \"$CMD\""
    ;;
  esac
}

print_configmap() {
  [ -n "$HH" ] && exit 0
  _kubectl ${NAMESPACE:+-n "$NAMESPACE"} get configmap "entando-docker-image-info" -o yaml |
    perl -p0e 's/.*\n(data:.*)/\1/msg' | perl -p0e 's/\n[^ ].*//msg'
}

print_images() {
  local FILTER="${ENTANDO_STANDARD_IMAGES[*]}"
  FILTER="${FILTER// /\\|}"
  args_or_ask ${HH:+"$HH"} -n -f '--all/// prints all the images' "$@" && {
    FILTER=".*"
  }

  [ -n "$HH" ] && exit 0
  # shellcheck disable=SC2021 disable=SC2155
  local RES=$(
    _kubectl ${NAMESPACE:+-n "$NAMESPACE"} get pods -o jsonpath="{..image}" |
      \tr -s '[[:space:]]' '\n' | \sort -u |
      \grep "$FILTER"
  )
  [ -z "$RES" ] && FATAL "Unable fetch the images list"

  echo "$RES"
  echo ""
  if $OS_WIN; then
    echo "$RES" | sha256sum
  else
    echo "$RES" | shasum -a 256
  fi
}

RUN "$@"

