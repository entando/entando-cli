#!/bin/bash

#H::
#H:: Helps dealing with entando apps
#H::
#H:: Syntax:
#H::  - ent app {command} ...
#H::
#H:: Commands:

[[ "$1" == "--help" && "$2" == "--short" ]] && {
  echo -e "Helper for managing an Entando App" && exit 0
}

[ "$1" = "--cmplt" ] && {
  . s/essentials.sh
  print_ent_module_sub-commands "${BASH_SOURCE[0]}"
  exit 0
}

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
cd "$DIR/../.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

. s/_base.sh

RUN() {
  HH="$(parse_help_option "$@")"

  
  show_help_option "$HH" ":main"
  args_or_ask -h "$HH" -a -n -- "CMD" '1///%sp command' "$@"
  args_or_ask -h "$HH" -n -p NAMESPACE "--namespace/ext_ic_id//%sp the kubernetes namespace" "$@"

  show_help_option "$HH" "$CMD"
  case "$CMD" in
  "images") #H: print the images running in the current EntandoApp
    print_images "$@"
    ;;
  "configmap") #H: prints the images configmap used to deploy the current EntandoApp
    print_configmap "$@"
    ;;
  "operator-configmap") #H: prints the configmap used configure the operator deployment parameters
    print_operator_configmap "$@"
    ;;
  "status") #H: prints status information about the current EntandoApp
    local WATCH
    determine_namespace ENTANDO_NAMESPACE "$@"
    args_or_ask -h "$HH" -n -p ENTANDO_APPNAME "--appname/ext_ic_id//%sp the application name" "$@"
    args_or_ask -h "$HH" -n -F WATCH "--watch///" "$@"

    [ -n "$HH" ] && exit 0

    if $WATCH; then
      ent app-info watch "$ENTANDO_APPNAME" "$ENTANDO_NAMESPACE"
    else
      ent app-info "$ENTANDO_APPNAME" "$ENTANDO_NAMESPACE"
    fi
    ;;
  "")
    [ -n "$HH" ] && exit 0
    print_ent_module_help "${BASH_SOURCE[0]}" "$2"
    ;;
  *)
    [ -n "$HH" ] && exit 0
    print_ent_module_help "${BASH_SOURCE[0]}" "$2"
    FATAL "Unknown command \"$CMD\""
    ;;
  esac
}

print_configmap() {
  [ -n "$HH" ] && exit 0
  _kubectl ${NAMESPACE:+-n "$NAMESPACE"} get configmap "entando-docker-image-info" -o yaml |
    perl -p0e 's/.*\n(data:.*)/\1/msg' | perl -p0e 's/\n[^ ].*//msg'
}

print_operator_configmap() {
  CHECK=true
  args_or_ask -h "$HH" -f -- "--no-check///suppress the check of the application version" "$@" && {
    CHECK=false;
  }
  [ -n "$HH" ] && exit 0
  if $CHECK; then
    # shellcheck disable=SC2034
    local ignore
    app-get-main-ingresses ignore ignore ignore ignore
    if ! check_ver_ge "6.3.0" "$ENTANDO_LATEST_DETECTED_APPVER"; then
      {
        _log_w 0 "This EntandoApp version doesn't seem to support the configmap \"entando-operator-config\""
        ask "Should I proceed anyway?" "Y" || FATAL "Quitting"
      } 1>&2
    fi
  fi
  _kubectl ${NAMESPACE:+-n "$NAMESPACE"} get configmap "entando-operator-config" -o yaml |
  perl -p0e 's/.*\n(data:.*)/\1/msg' | perl -p0e 's/\n[^ ].*//msg'
}

print_images() {

  [ -n "$HH" ] && exit 0
  
  # shellcheck disable=SC2021 disable=SC2155
  local RES=$(
    _kubectl ${NAMESPACE:+-n "$NAMESPACE"} get pods -o jsonpath="{..image}" |
      \tr -s '[[:space:]]' $'\n' | \sort -u
  )
  [ -z "$RES" ] && FATAL "Unable fetch the images list"

  echo "$RES"
  echo ""
  echo "$RES" | _sha256sum
}

RUN "$@"

