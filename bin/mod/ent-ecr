#!/bin/bash

#H::
#H:: Helper for managing the ECR
#H::
#H:: Syntax:
#H::  - ent ecr {command} ...
#H::
#H:: Commands:

[[ "$1" == "--help" && "$2" == "--short" ]] && {
  echo -e "Helper for managing the ECR" && exit 0
}

[ "$1" = "--cmplt" ] && {
  . s/essentials.sh
  print_ent_module_sub-commands "${BASH_SOURCE[0]}"
  exit 0
}

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
cd "$DIR/../.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

. s/_base.sh

RUN() {
  bgn_help_parsing "${BASH_SOURCE[0]}" "$@"
  local CMD="$1";shift;
  case "$CMD" in
    "list") #H: shows the list of bundles
      end_help_parsing
      if args_or_ask -h "$HH" -n -f "--debug///" "$@"; then
        app-get-main-ingresses url_scheme main_ingress ecr_ingress ignored
        _pp ENTANDO_LATEST_DETECTED_APPVER url_scheme main_ingress ecr_ingress ignored
        ecr-prepare-action INGRESS_URL TOKEN
        _pp INGRESS_URL TOKEN 
        ecr-bundle-action --debug "" "GET" "" "$INGRESS_URL" "$TOKEN" "" 
      else
        ecr-prepare-action INGRESS_URL TOKEN
        ecr-bundle-action "" "GET" "" "$INGRESS_URL" "$TOKEN" "" 2>/dev/null \
        | _jq -r ".payload[] | [ \
            .code, \
            .lastJob.status // \"(not-installed)\", \
            .lastJob.componentVersion \
          ] | @tsv"
      fi
      ;;
    "uninstall") #H: uninstalls a bundle
      end_help_parsing
      ecr-prepare-action INGRESS_URL TOKEN
      ecr-bundle-action "" "POST" "uninstall" "$INGRESS_URL" "$TOKEN" "$1" 2>/dev/null
      ;;
    "install") #H: installs a bundle
      ent-ecr-install "$1" "$@"
      ;;
    "usage-report") #H: shows the usage status of the bundle
      end_help_parsing
      ecr-prepare-action INGRESS_URL TOKEN
      ecr-bundle-action "" "GET" "usage" "$INGRESS_URL" "$TOKEN" "$1" 2>/dev/null
      ;;
    "generate-cr"|"gen-cr"|"cr") #H: generates the deployment custom resource
      ecr-generate-custom-resource "$@"
      ;;
    "get-bundle-id"|"bid") #H: calculates and displays the bundle id
      _ecr-get-bundle-id "$@"
      ;;
    "get-plugin-code"|"plc") #H: calculates and displays the plugin code
      _ecr-get-plugin-code "$@"
      ;;
    "get-plugin-id"|"pid") #H: obsolete, use get-plugin-code
      _log_i "Deprecated, please use get-plugin-code" 1>&2
      _ecr-get-plugin-code "$@"
      ;;
    "gen-secret"|"sec") #H: generates and displays a plugin secret skeleton
      _ecr-gen-secret "$@"
      ;;
    "deploy") #H: generates the CR and deploys it to the current profile
      require_develop_checked
      _ecr-deploy "$@"
      ;;
    "--help"|"")
      args_or_ask -h "$HH" -a -n -- "CMD" '1///%sp command' "$@"
      args_or_ask -h "$HH" -n -p NAMESPACE "--namespace/ext_ic_id//%sp the kubernetes namespace" "$@"
      end_help_parsing
      ;;
    *)
      FATAL "Unknown command \"$CMD\""
      ;;
  esac
}

_ecr-deploy() {
  local BUNDLE_NAME BUNDLE_PUB_REPO THUMBNAIL_FILE THUMBNAIL_URL

  bgn_help_parsing ":ECR-DEPLOY" "$@"
  args_or_ask -h "$HH" -n BUNDLE_NAME  '--name///name of the bundle project' "$@"
  args_or_ask -h "$HH" -n BUNDLE_PUB_REPO "--repo///url of the bundle publication repository" "$@"
  args_or_ask -h "$HH" -n -p BUNDLE_PUB_REPO "--repository///alias of \"--repo\"" "$@"
  args_or_ask -h "$HH" -n THUMBNAIL_FILE "--thumbnail-file///path of the thumbnail file" "$@"
  args_or_ask -h "$HH" -n THUMBNAIL_URL "--thumbnail-url///url of the thumbnail" "$@"
  NONNULL -s BUNDLE_PUB_REPO
  end_help_parsing

  (
    export SYS_IS_STDOUT_A_TTY=false
    ecr.generate-custom-resource "$BUNDLE_NAME" "$BUNDLE_PUB_REPO" "$THUMBNAIL_FILE" "$THUMBNAIL_URL" \
      | _kubectl apply -f -
  )
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_ecr-gen-secret() {
  local SEC_NAME BUNDLE_ID BUNDLE_NAME BUNDLE_PUB_REPO EDIT SAVE_TO APPLY
  bgn_help_parsing ":ENT-ECR-GET-PLUGIN-ID" "$@"
  args_or_ask -h "$HH" -a -- SEC_NAME "1/ext_ic_id//%sp the bundle secret name" "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_ID "--bundle-id/ext_ic_id//%sp the bundle id" "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_PUB_REPO '--repo/url//%sp bundle publication repository URL' "$@"
  args_or_ask -h "$HH" -F -- EDIT '--edit///%sp edit before printing' "$@"
  args_or_ask -h "$HH" -n -- SAVE_TO '--save///%sp saves to the given file instead of printing' "$@"
  args_or_ask -h "$HH" -F -- APPLY '--apply///%sp applies to the current kube instead of printing' "$@"
  end_help_parsing
  
  _nn SAVE_TO && assert_strict_file_name "SAVE_TO" "$SAVE_TO" fatal
  
  _nn BUNDLE_ID || {
    ecr.calculate-bundle-id BUNDLE_ID "$BUNDLE_PUB_REPO"
  }
  
  ecr.generate-and-print-secret "$SEC_NAME" "$BUNDLE_ID" "$EDIT" "$SAVE_TO" "$APPLY"
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_ecr-get-plugin-code() {
  local PLUGIN_NAME AUTO_PLUGIN_NAME BUNDLE_ID BUNDLE_PUB_REPO VERBOSE
  bgn_help_parsing ":ENT-ECR-GET-PLUGIN-ID" "$@"
  args_or_ask -h "$HH" -a -n -- PLUGIN_NAME '1/url_path//%sp the plugin base name' "$@"
  args_or_ask -h "$HH" -n -F -- AUTO_PLUGIN_NAME '--auto///%sp tries to derive part of the required information from the repo' "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_ID "--bundle-id/ext_ic_id//%sp the bundle id (alternative to \"--repo\")" "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_PUB_REPO '--repo/any_url//%sp bundle publication repository URL' "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_VERSION '--version/url//%sp version tag to consider when "--auto" is specified, otherwise the default branch is assumed' "$@"
  args_or_ask -h "$HH" -n -F -- VERBOSE '--verbose/url//%sp prints to the stderr additional info' "$@"
  end_help_parsing
  if $AUTO_PLUGIN_NAME && [ -z "$PLUGIN_NAME" ]; then
    if [[ "$BUNDLE_PUB_REPO" = "docker://"* ]] || [[ "$BUNDLE_PUB_REPO" = "oci://"* ]]; then
      _FATAL "switch \"--auto\" is not supported for OCI bundles, please explicitly provide the plugin name"
    fi
    # shellcheck disable=SC2031
    _ecr_determine_git_bundle_plugin_name PLUGIN_NAME "$BUNDLE_PUB_REPO" "$BUNDLE_VERSION" 
  fi
  _nn BUNDLE_ID || {
    NONNULL -s BUNDLE_PUB_REPO
    ecr.calculate-bundle-id BUNDLE_ID "$BUNDLE_PUB_REPO"
  }
  local RES
  NONNULL -s PLUGIN_NAME BUNDLE_ID
  ecr.calculate-plugin-id RES "$PLUGIN_NAME" "$BUNDLE_ID"
  echo "$RES"
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_ecr-get-bundle-id() {
  local BUNDLE_PUB_REPO
  bgn_help_parsing ":ENT-ECR-GET-BUNDLE-ID" "$@"
  args_or_ask -h "$HH" -a -n -- BUNDLE_PUB_REPO '1///%sp bundle publication repository URL' "$@"
  assert_any_url BUNDLE_PUB_REPO "$BUNDLE_PUB_REPO"
  end_help_parsing
  local RES
  NONNULL -s BUNDLE_PUB_REPO
  ecr.calculate-bundle-id RES "$BUNDLE_PUB_REPO"
  echo "$RES"
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ecr-generate-custom-resource() {
  local BUNDLE_NAME BUNDLE_PUB_REPO THUMBNAIL_FILE THUMBNAIL_URL

  bgn_help_parsing ":ECR-CR" "$@"
  args_or_ask -h "$HH" -n BUNDLE_NAME  '--name///name of the bundle project' "$@"
  args_or_ask -h "$HH" -n BUNDLE_PUB_REPO "--repo///url of the bundle publication repository" "$@"
  args_or_ask -h "$HH" -n -p BUNDLE_PUB_REPO "--repository///alias of \"--repo\"" "$@"
  args_or_ask -h "$HH" -n THUMBNAIL_FILE "--thumbnail-file///path of the thumbnail file" "$@"
  args_or_ask -h "$HH" -n THUMBNAIL_URL "--thumbnail-url///url of the thumbnail" "$@"
  NONNULL -s BUNDLE_PUB_REPO
  end_help_parsing
  
  ecr.generate-custom-resource "$BUNDLE_NAME" "$BUNDLE_PUB_REPO" "$THUMBNAIL_FILE" "$THUMBNAIL_URL"
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ent-ecr-install() {
  local VERSION_TO_INSTALL CONFLICT_STRATEGY
  shift
  args_or_ask -n ${HH:+"$HH"} VERSION_TO_INSTALL '--version/ver//defines the specific version to install' "$@"
  args_or_ask -n ${HH:+"$HH"} CONFLICT_STRATEGY \
    '--conflict-strategy///strategy to adopt if the object is already present (CREATE|SKIP|OVERRIDE)' "$@"
  args_or_ask -h "$HH" -n -a BUNDLE_NAME  '1///name of the bundle project' "$@"
  args_or_ask -h "$HH" -n -p BUNDLE_NAME '--name///name of the bundle project' "$@"
  [ -n "$HH" ] && return 0
  _nn BUNDLE_NAME || FATAL "Please provide the bundle name"
  ecr.install-bundle "$BUNDLE_NAME" "$VERSION_TO_INSTALL" "$CONFLICT_STRATEGY"
}

RUN "$@"
