#!/bin/bash

#H::
#H:: Helper for managing the ECR
#H::
#H:: Syntax:
#H::  - ent ecr {command} ...
#H::
#H:: Commands:

[[ "$1" == "--help" && "$2" == "--short" ]] && {
  echo -e "Helper for managing the ECR" && exit 0
}

[ "$1" = "--cmplt" ] && {
  . s/essentials.sh
  print_ent_module_sub-commands "${BASH_SOURCE[0]}"
  exit 0
}

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
cd "$DIR/../.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

. s/_base.sh

RUN() {
  bgn_help_parsing "${BASH_SOURCE[0]}" "$@"
  case "$1" in
    "list") #H: shows the list of bundles
      end_help_parsing
      if args_or_ask -h "$HH" -n -f "--debug///" "$@"; then
        app-get-main-ingresses url_scheme main_ingress ecr_ingress ignored
        _pp ENTANDO_LATEST_DETECTED_APPVER url_scheme main_ingress ecr_ingress ignored
        ecr-prepare-action INGRESS_URL TOKEN
        _pp INGRESS_URL TOKEN 
        ecr-bundle-action --debug "" "GET" "" "$INGRESS_URL" "$TOKEN" "" 
      else
        ecr-prepare-action INGRESS_URL TOKEN
        ecr-bundle-action "" "GET" "" "$INGRESS_URL" "$TOKEN" "" 2>/dev/null \
        | _jq -r ".payload[] | [ \
            .code, \
            .lastJob.status // \"(not-installed)\", \
            .lastJob.componentVersion \
          ] | @tsv"
      fi
      ;;
    "uninstall") #H: uninstalls a bundle
      end_help_parsing
      ecr-prepare-action INGRESS_URL TOKEN
      ecr-bundle-action "" "GET" "uninstall" "$INGRESS_URL" "$TOKEN" "$1" 2>/dev/null
      ;;
    "install-status") #H: shows the uninstall status of the bundle
      end_help_parsing
      ecr-prepare-action INGRESS_URL TOKEN
      ecr-bundle-action "" "GET" "install" "$INGRESS_URL" "$TOKEN" "$@"
      ;;
    "uninstall-status") #H: shows the uninstall status of the bundle
      end_help_parsing
      ecr-prepare-action INGRESS_URL TOKEN
      ecr-bundle-action "" "GET" "uninstall" "$INGRESS_URL" "$TOKEN" "$@"
      ;;
    "usage-status") #H: shows the usage status of the bundle
      end_help_parsing
      ecr-prepare-action INGRESS_URL TOKEN
      ecr-bundle-action "" "GET" "usage" "$INGRESS_URL" "$TOKEN" "$1" 2>/dev/null
      ;;
    "generate-cr"|"gen-cr"|"cr") #H: shows the usage status of the bundle
      ecr-generate-custom-resource "$@"
      ;;
    "get-bundle-id"|"bid") #H: calulates and displays the bundle id
      shift
      _ecr-get-bundle-id "$@"
      ;;
    "get-plugin-id"|"pid") #H: calulates and displays the plugin id
      shift
      _ecr-get-plugin-id "$@"
      ;;
    "gen-secret"|"sec") #H: generates and displays a plugin secret skeleton
      shift
      _ecr-gen-secret "$@"
      ;;
    "--help"|"")
      args_or_ask -h "$HH" -a -n -- "CMD" '1///%sp command' "$@"
      args_or_ask -h "$HH" -n -p NAMESPACE "--namespace/ext_ic_id//%sp the kubernetes namespace" "$@"
      end_help_parsing
      ;;
    *)
      FATAL "Unknown command \"$1\""
      ;;
  esac
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_ecr-gen-secret() {
  bgn_help_parsing ":ENT-ECR-GET-PLUGIN-ID" "$@"
  args_or_ask -h "$HH" -a -n -- SEC_NAME "1/ext_ic_id//%sp the bundle secret name" "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_ID "--bundle-id/ext_ic_id//%sp the bundle id" "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_NAME "--bundle-name/ext_ic_id//%sp the bundle name" "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_PUB_REPO '--repository/url//%sp bundle publication repository URL' "$@"
  args_or_ask -h "$HH" -F -- EDIT '--edit///%sp edit before printing' "$@"
  args_or_ask -h "$HH" -F -- EDIT '--edit///%sp edit before printing' "$@"
  args_or_ask -h "$HH" -n -- SAVE_TO '--save///%sp saves to the given file instead of printing' "$@"
  args_or_ask -h "$HH" -F -- APPLY '--apply///%sp applies to the current kube instead of printing' "$@"
  end_help_parsing
  
  _nn SAVE_TO && assert_strict_file_name "SAVE_TO" "$SAVE_TO" fatal
  
  _nn BUNDLE_ID || {
    ecr.calculate-bundle-id BUNDLE_ID "$BUNDLE_NAME" "$BUNDLE_PUB_REPO"
  }
  
  ecr.generate-and-print-secret "$SEC_NAME" "$BUNDLE_ID" "$EDIT" "$SAVE_TO"
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_ecr-get-plugin-id() {
  bgn_help_parsing ":ENT-ECR-GET-PLUGIN-ID" "$@"
  args_or_ask -h "$HH" -a -n -- PLUGIN_NAME '1/ext_ic_id//%sp the plugin base name' "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_ID "--bundle-id/ext_ic_id//%sp the bundle id" "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_NAME "--bundle-name/ext_ic_id//%sp the bundle name" "$@"
  args_or_ask -h "$HH" -n -- BUNDLE_PUB_REPO '--repository/url//%sp bundle publication repository URL' "$@"
  end_help_parsing
  _nn BUNDLE_ID || {
    ecr.calculate-bundle-id BUNDLE_ID "$BUNDLE_NAME" "$BUNDLE_PUB_REPO"
  }
  local RES
  ecr.calculate-plugin-id RES "$PLUGIN_NAME" "$BUNDLE_ID"
  echo "$RES"
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_ecr-get-bundle-id() {
  bgn_help_parsing ":ENT-ECR-GET-BUNDLE-ID" "$@"
  args_or_ask -h "$HH" -a -n -- NAME "1/ext_ic_id//%sp the bundle name" "$@"
  args_or_ask -h "$HH" -a -n -- URL '2/url//%sp bundle publication repository URL' "$@"
  end_help_parsing
  local RES
  ecr.calculate-bundle-id RES "$NAME" "$URL"
  echo "$RES"
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ecr-generate-custom-resource() {
  local NAME REPOSITORY THUMBNAIL_FILE THUMBNAIL_URL

  bgn_help_parsing ":ECR-CR" "$@"
  args_or_ask -n -h "$HH" NAME '--name///name of the bundle project' "$@"
  args_or_ask -n -h "$HH" REPOSITORY '--repository///url of the publication repository' "$@"
  args_or_ask -n -h "$HH" THUMBNAIL_FILE "--thumbnail-file///pathname of the thumbnail" "$@"
  args_or_ask -n -h "$HH" THUMBNAIL_URL "--thumbnail-url///url of the thumbnail" "$@"
  end_help_parsing
  
  ecr.generate-custom-resource "$NAME" "$REPOSITORY" "$THUMBNAIL_FILE" "$THUMBNAIL_URL"
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

RUN "$@"
