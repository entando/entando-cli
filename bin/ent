#!/bin/bash

#H::
#H:: The Entando Command Line
#H::
#H:: Syntax:
#H::  - ent {command} {sub-command} {params}
#H::
#H:: Built-in Scripts:

# shellcheck disable=SC2034
ENT_ORIGIN_WORKDIR="$PWD"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RUN() {
  upgrade_project_file "$C_ENT_PRJ_FILE" "$C_ENT_OLD_PRJ_FILE"
  reload_cfg "$C_ENT_PRJ_FILE"
  upgrade_project_file "$C_ENT_STATE_FILE" "$C_ENT_OLD_STATE_FILE"
  reload_cfg "$C_ENT_STATE_FILE"
  export ENTANDO_HELP_FUNCTIONS_TO_LIST="_ent-bundle _ent-bundler _ent-jhipster"
  export ENTANDO_HELP_MODULE_NOT_TO_LIST="host node-cmd-wrapper"
  export ENTANDO_CLI_DEFAULT_DOCKER_REGISTRY
  export ENTANDO_CLI_DEFAULT_HUB
  
  while true; do
    cmd="$1"
    export ENTANDO_CLI_COMMAND="$1"

    shift
    case "$cmd" in
      "version") #H: shows the version of the current ent
        which_ent version
        ;;
      "home") #H: shows the location of the current ent
        which_ent home
        ;;
      "which") #H: shows the location of the current ent
        which_ent which
        ;;
      "activate") #H: activates one of the installed ents
        "${ENTANDO_ENT_HOME}/bin/mod/ent-ent" activate "$@" # see the other call for the source-execution
        ;;
      "import") #H: imports configuration and library from another compatible ENT installation
        import_ent_installation
        ;;
      "config") #H: helps dealing with ent configurations
        handle_config_command "$@"
        ;;
      "namespace") #H: sets the namespace 
        handle_status_config ENTANDO_NAMESPACE "$@"
        ;;
      "appver") #H: sets the version assumed for the application
        handle_status_config ENTANDO_APPVER "$@"
        ;;
      "appname") #H: sets the default application names
        handle_status_config ENTANDO_APPNAME "$@"
        ;;
      "profile"|"P"|"pro") #H: helps creating and managing profiles
        # shellcheck disable=SC1090
        source "$ENTANDO_ENT_HOME/bin/mod/ent-profile" "$@"
        ;;
      "attach-vm") #H: [vm-name] -- attach ent to a ent-managed VM
        managed-vm-attach "$@"
        ;;
      "detach-vm") #H: detach ent from the current ent-managed VM
        managed-vm-detach "$@"
        ;;
      "attach-kubeconfig")  #H: attaches ent a kube configuration
        kubeconfig-attach "$@"
        ;;
      "detach-kubeconfig")  #H: detaches ent from kube configuration
        kubeconfig-detach "$@"
        ;;
      "attach-kubectx")  #H: attaches ent to a kube context
        ent profile link "$@"
        ;;
      "detach-kubectx")  #H: detaches ent from a kube context
        kubectx-detach
        ;;
      "list-kubectx")  #H: prints a list of available contexts from the current kubeconfig
        kubectx-list "$@"
        ;;
      "fix-vm-ddns") #H: fixes the domain name in a dynamic DNS nip.io setup (--simple in quickstart)
        # shellcheck disable=SC1091
        _source_ent host "$cmd" "$@"
        ;;
      "commands") #H: shows other ent top level commands
        # shellcheck disable=SC1091
        _source_ent help --simple
        ;;
      "print-completion-setup")
        _ent completion "$@";;
      "completion") #H: setups the ent autocompletion
        [ -z "$1" ] && FATAL "Please provide the shell type (bash|zsh)"
        if [ "$1" = "zsh" ]; then
          echo "source \"$ENTANDO_ENT_HOME/s/completion.zsh\""
        elif [ "$1" = "bash" ]; then
          echo "source \"$ENTANDO_ENT_HOME/s/completion.sh\""
        else
          # shellcheck disable=SC1090
          echo "Unsupported shell"
        fi
        return 0
        ;;
      "kubectl-cmd") #H: setups kubectl alternative command to use
        handle_kubectl_cmd "$@"
        ;;
      "reset-kubectl-mode") #H: reset the kubectl mode to the default one
        kubectl_mode --reset-cfg
        ;;
      "status") #H: shows the ent general status
        print_ent_general_status
        ;;
      "auto-align-kubectl") #H: automaticall align the kubectl version to the server version
        _ent kubectl "ent-auto-align" "$@"
        ;;
      "node"|"npm")
        _ent node-cmd-wrapper "$cmd" "ENT wrapper for the node command \"$cmd\"" "$@"
        ;;
      "jhipster"|"bundler"|"bundle")
        _ent node-cmd-wrapper "$cmd" "ENT wrapper for the node command \"$cmd\"" "$@"
        ;;
      "pkg") #H: helps dealing with the ent bin tools
        ent-pkg "$@"
        ;;
      "crane"|"docker"|"jq"|"k9s")
        ent-pkg run "$cmd" "$@"
        ;;
      "use") #H: shortcut to "ent pro use"
        _ent pro use "$@"
        ;;
      "load-module")
        ent-load-extension-module "$@"
        ;;
      "")
        # shellcheck disable=SC1091
        _source_ent help
        ;;
      --cmplt)
        cmplt
        ;;
      *)
        [ "$cmd" = "k" ] && cmd="kubectl"

        local FOUND=false

        local mod_script="${ENTANDO_ENT_HOME}/bin/mod/ent-${cmd}"

        if [ -f "$mod_script" ]; then
          FOUND=true
          # shellcheck disable=SC1090
          source "$mod_script" "$@"
        else
          local ext_mod_script="$ENTANDO_ENT_EXTENSIONS_MODULES_PATH/ent-${cmd}"
          if _ent.extension-module.is-present "$cmd"; then
            FOUND=true
            _ent.extension-module.execute "${cmd}" "$@"
          fi
        fi

        ! $FOUND && {
          _log_e "Unrecognized ent command \"$cmd\""
          return 33
        }

        ;;
    esac
    index_of_arg "--AND" "$@"
    if [ $? -eq 255 ]; then shift $#; else shift $?; fi
    [ -z "$1" ] && break
  done
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ent-load-extension-module() {
  (
    local REPO NAME BRANCH
    args_or_ask -h "$HH" -a -n -- REPO '1/git_repo//%sp repository of the module' "$@"
    args_or_ask -h "$HH" -n -- NAME '--name/strict_file_name//%sp name of the module' "$@"
    args_or_ask -h "$HH" -n -- BRANCH '--branch/dn//%sp branch to use instead of the default one' "$@"
    end_help_parsing

    DIRNAME="$(basename "$REPO")"
    [ -z "$NAME" ] && NAME="$DIRNAME"

    local EXT_DIR="${ENTANDO_ENT_HOME}/bin/mod/ext"
    mkdir -p "$EXT_DIR"
    __cd "$EXT_DIR"
    if [[ "$PWD" = *".entando"* ]]; then
      [ -d "$DIRNAME" ] && rm -rf "$DIRNAME"
      git clone --depth=1 ${BRANCH:+-b "$BRANCH"} --single-branch "$REPO"
      cp -p -- "$PWD/$DIRNAME/mod/"* .
    else
      _FATAL "Extension module cleanup: Refusing to delete a non entando-cli dir"
    fi
  )
}

ent-pkg() {
  bgn_help_parsing ":ENT-PKG" "$@"
  CMD="$1"; shift;
  case "$CMD" in
    "list"|"ls") 
      end_help_parsing
      # shellcheck disable=SC2010
      ls -l "$ENTANDO_BINS" | grep -v "^.*\.tmp$";;
    "get")
      args_or_ask -h "$HH" -a -n -- PKG '1///%sp name of the package' "$@"
      args_or_ask -h "$HH" -n -- VER '--version///%sp version of the package' "$@"
      end_help_parsing
      shift 1
      NONNULL -s PKG
      assert_strict_file_name "PKG" "$PKG" fatal-nst
      _nn VER && assert_acceptable_version_tag "VER" "$VER" fatal-nst
      [ "$PKG" = "ent" ] && _FATAL -s "Denied"
      _pkg_get --verbose "$PKG" "$VER"
      ;;
    "which")
      args_or_ask -h "$HH" -a -n -- PKG '2/strict_file_name//%sp name of the package' "$@"
      end_help_parsing
      shift 1
      end_help_parsing
      _pkg_get_path RES "$PKG"
      echo "$RES"
      ;;
    "run")
      args_or_ask -h "$HH" -a -n -- PKG '1/strict_file_name//%sp name of the package' "$@"
      shift 1

      if type -t "_pkg_$PKG" > /dev/null; then
        "_pkg_$PKG" "$@"
      else
        _pkg_get_path RES "$PKG"
        "$RES" "$@"
      fi
      ;;
    "rm"|"delete")
      args_or_ask -h "$HH" -a -n -- PKG '1/strict_file_name//%sp name of the package' "$@"
      shift 1
      _pkg_get_path --strict RES "$PKG"
      ask "Are you sure?" "n" && rm "$RES"
      ;;
    "--help")
      args_or_ask -h "$HH" -a -n -- CMD '1///%sp command (ls|get|run|which|rm)' "$@"
      end_help_parsing
      ;;
    *)
      simple_cmplt_handler "ls get run which rm"
      [ -n "$CMD" ] && _FATAL "Unknown command \"$CMD\""
      ;;
  esac
}

which_ent() {
  case "$1" in
    version) echo "${ENTANDO_CLI_VERSION}"; exit;;
    which) echo "${ENTANDO_CLI_VERSION}";;
    home) echo "$ENTANDO_ENT_HOME"; exit;;
  esac
  
  (
    echo ""
    echo "---"
    echo ""
    
    # CLI INFO
    echo "## CLI:"
    echo ""
    cd "$ENTANDO_ENT_HOME"
    echo "- DIR: $ENTANDO_ENT_HOME"
    echo "- TAG: $(git tag -l --contains HEAD 2>/dev/null | tr '\n' ',' | perl -ple 'chop')"
    IFS='|' read -r sha time < <(git log --pretty=format:'%H|%ci' -1)
    echo "- SHA: $sha"
    echo "- UPD: $time"
    echo ""
    
    # RELEASE INFO
    __cd "$(_dist_directory)"
    echo "## RELEASE:"
    echo ""
    echo "- DIR: $PWD"
    echo "- TAG: $(git tag -l --contains HEAD 2>/dev/null | tr '\n' ',' | perl -ple 'chop')"
    IFS='|' read -r sha time < <(git log --pretty=format:'%H|%ci' -1)
    echo "- SHA: $sha"
    echo "- UPD: $time"
    echo ""
    
  ) 1>&2
}

handle_config_command() {
  bgn_help_parsing "${BASH_SOURCE[0]}" "$@"

  args_or_ask -h "$HH" -f -- '--default///selects the default ent configuration' "$@" && {
    # shellcheck disable=SC2034
    CFG_FILE="$ENT_DEFAULT_CFG_FILE"
    ENT_WORK_DIR="${ENTANDO_ENT_HOME}/w"
    THIS_PROFILE=""
  }

  args_or_ask -h "$HH" -f -d -- '--print///print the configuration (default)' "$@" && {
    if [ -n "$THIS_PROFILE" ]; then
      _log_i "Configuration of the profile \"$THIS_PROFILE\":" 1>&2
    else
      _log_i "Default configuration of the current ent installation:" 1>&2
    fi
    [ -f "$ENT_WORK_DIR/.cfg" ] || _FATAL -s "Configuration file \"$ENT_WORK_DIR/.cfg\" not found"
    cat "$ENT_WORK_DIR/.cfg"
  }
  
  args_or_ask -h "$HH" -f -- '--edit///edits the configuration' "$@" && {
    _edit "$ENT_WORK_DIR/.cfg"
  }
  
  args_or_ask -h "$HH" -f -- '--set///sets a specific configuration parameter' "$@" && {
    args_or_ask -a -h "$HH" "CFG_KEY" "1///%sp the config key" "$@"
    args_or_ask -a -n -h "$HH" "CFG_VALUE" "2///%sp the value to set" "$@"
    save_cfg_value "$CFG_KEY" "$CFG_VALUE" "$CFG_FILE"
  }
  
  args_or_ask -h "$HH" -f -- '--del///deletes a specific configuration parameter' "$@" && {
    args_or_ask -a -h "$HH" "CFG_KEY" "1///%sp the config key" "$@"
    save_cfg_value "$CFG_KEY" "" "$CFG_FILE"
  }
  
  args_or_ask -h "$HH" -f -- '--get///gets a specific configuration parameter' "$@" && {
    args_or_ask -a -h "$HH" "CFG_KEY" "1///%sp the config key" "$@"
    (
      reload_cfg "$CFG_FILE"
      echo "${!CFG_KEY}"
    )
  }
  
  end_help_parsing
}

cmplt() {
  cd "$ENTANDO_ENT_HOME/bin/mod" || {
    echo "Unable to enter directory $PWD/bin"
    exit 99
  }
  for file in ent-*; do
    mod="${file//ent-/}"
    echo "$mod"
  done

  [ -z "$ENTANDO_ENT_EXTENSIONS_MODULES_PATH" ] && ENTANDO_ENT_EXTENSIONS_MODULES_PATH="$ENTANDO_ENT_HOME/bin/mod/ext"
  if [ -d "$ENTANDO_ENT_EXTENSIONS_MODULES_PATH" ]; then
  (
    cd "$ENTANDO_ENT_EXTENSIONS_MODULES_PATH" || exit 0
    for file in ent-*; do
      [ -f "$file" ] && {
        mod="${file//ent-/}"
        echo "$mod"
      }
    done
  )
  fi

  local topcmd+=(
    "attach-vm" "detach-vm" "fix-vm-ddns" "completion" "config" "which" "version" "home" "import" "activate"
      "kubectl-cmd" "reset-kubectl-mode" "status"
      "attach-kubeconfig" "detach-kubeconfig" "namespace" "appname" "pkg"
      "attach-kubectx" "detach-kubectx" "list-kubectx"
      "bundle" "bundler" "jhipster"
  )

  for tc in "${topcmd[@]}"; do
    echo "$tc"
  done
}

_ent() {
  # shellcheck disable=SC1090
  "$ENTANDO_ENT_HOME/bin/ent" "$@"
}

_source_ent() {
  # shellcheck disable=SC1090
  source "$ENTANDO_ENT_HOME/bin/ent" "$@"
}

# ######################################################################################################################
# ######################################################################################################################
# ######################################################################################################################
# shellcheck disable=SC2296

if (
 [[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] ||
 [[ -n $KSH_VERSION && $(cd "$(dirname -- "$0")" &&
    printf '%s' "${PWD%/}/")$(basename -- "$0") != "${.sh.file}" ]] ||
 [[ -n $BASH_VERSION ]] && (return 0 2>/dev/null)
); then
  ENTANDO_ENT_TMPFILE_0002bb75="$(mktemp /tmp/ent-runner-XXXXXXXX)"
  ENTANDO_ENT_TMPVAR_0002bb75=0
  case "${1}" in
    "activate")
      ENTANDO_ENT_ACTIVATION_MODE="$ENTANDO_ENT_ACTIVATION_MODE" "$ENTANDO_ENT_HOME/bin/mod/ent-ent" --for-sourced-execution "$ENTANDO_ENT_TMPFILE_0002bb75" "$@"
      ENTANDO_ENT_TMPVAR_0002bb75="$?"
      ;;
    "profile"|"P"|"pro")
      case "$2" in
      "use"|"tmp")
        shift 1
        ENTANDO_ENT_ACTIVATION_MODE="$ENTANDO_ENT_ACTIVATION_MODE" "$ENTANDO_ENT_HOME/bin/mod/ent-profile" --for-sourced-execution "$ENTANDO_ENT_TMPFILE_0002bb75" "$@"
        ;;
      *)
        rm "$ENTANDO_ENT_TMPFILE_0002bb75"
        ;;
      esac
      ;;
    "help")
      shift
      ENTANDO_HELP_FUNCTIONS_TO_LIST="_ent-bundle _ent-bundler _ent-jhipster"
      "$ENTANDO_ENT_HOME/bin/mod/ent-help" "$@"
      ;;
    *)
      rm "$ENTANDO_ENT_TMPFILE_0002bb75"
      ;;
  esac
  
  if [ ! -f "$ENTANDO_ENT_TMPFILE_0002bb75" ]; then 
    echo "Sourced execution is not permitted for the command $1" 1>&2
    return 99
  fi

  [ -f "$ENTANDO_ENT_TMPFILE_0002bb75" ] && {
    if [ "$ENTANDO_ENT_TMPVAR_0002bb75" = 0 ]; then
      # shellcheck disable=SC1090
      . "$ENTANDO_ENT_TMPFILE_0002bb75"
      rm "$ENTANDO_ENT_TMPFILE_0002bb75"
    fi
  }

  unset ENTANDO_ENT_TMPFILE_0002bb75
  return "$ENTANDO_ENT_TMPVAR_0002bb75"
else
  # shellcheck disable=SC2034
  ENTANDO_CALLER_PWD="$PWD"
fi

upgrade_project_file() {
  local N=$1
  local O=$2
  if [ -f "$O" ]; then
    mkdir -p "$C_ENT_PRJ_ENT_DIR"
    if [ -f "$N" ]; then
      mv "$O" "$C_ENT_PRJ_ENT_DIR/$O.backup"
    else
      mv "$O" "$N"
    fi 
  fi
}

handle_status_config() {
  if [ "$V"  = "--del" ]; then
    ent config --set ""
  else
    V="$2"
    [ "$V" == "--" ] && V="$3"
    if [ "$V"  = "" ]; then
      ent config --get "$1"
    else
      ent config --set "$1" "$V"
    fi
  fi
}

handle_kubectl_cmd() {
  if [ "$1"  = "" ]; then
    ent config --get "ENT_KUBECTL_CMD"
  else
    ent kubectl ent-set-cmd "$@"
  fi
}

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
cd "$DIR/.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

if [[ "$1" == "--help" || "$1" == "" ]]; then
  . s/essentials.sh
  print_ent_module_help "${BASH_SOURCE[0]}" "$2"
  exit 0
fi

[ "$1" = "--cmplt" ] && {
  cmplt
  exit 0
}

. s/_base.sh
cd - > /dev/null || _FATAL "internal error"

RUN "$@"
