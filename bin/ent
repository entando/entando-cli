#!/bin/bash

#H::
#H:: The Entando Command Line
#H::
#H:: Syntax:
#H::  - ent {command} {sub-command} {params}
#H::
#H:: Built-in Scripts:

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RUN() {
  local HH
  upgrade_project_file "$C_ENT_PRJ_FILE" "$C_ENT_OLD_PRJ_FILE"
  reload_cfg "$C_ENT_PRJ_FILE"
  upgrade_project_file "$C_ENT_STATE_FILE" "$C_ENT_OLD_STATE_FILE"
  reload_cfg "$C_ENT_STATE_FILE"

  while true; do
    cmd="$1"
    shift
    case "$cmd" in
      "which") #H: shows the location of the current ent
        which_ent
        ;;
      "activate") #H: activates one of the installed ents
        "${ENTANDO_ENT_HOME}/bin/mod/ent-ent" activate "$@" # see the other call for the source-execution
        ;;
      "import") #H: imports configuration and library from another compatible ENT installation
        import_ent_installation
        ;;
      "config") #H: [--edit] -- helps dealing with ent configurations
        handle_config_command "$@"
        ;;
      "attach-vm") #H: [vm-name] -- attach ent to a ent-managed VM
        attach_vm "$@"
        ;;
      "detach-vm") #H: detach ent from the current ent-managed VM
        detach_vm "$@"
        ;;
      "fix-vm-ddns") #H: fixes the domain name in a dynamic DNS nip.io setup (--simple in quickstart)
        # shellcheck disable=SC1091
        source ent host "$cmd" "$@"
        ;;
      "commands") #H: shows the ent top level commands
        # shellcheck disable=SC1091
        source ent help --simple
        ;;
      "completion") #H: setups the ent autocompletion
        [ -z "$1" ] && FATAL "Please provide the shell type (bash|zsh)"
        if [ "$1" = "zsh" ]; then
          echo "source \"$ENTANDO_ENT_HOME/s/completion.zsh\""
        elif [ "$1" = "bash" ]; then
          echo "source \"$ENTANDO_ENT_HOME/s/completion.sh\""
        else
          FATAL "Unsupported shell"
        fi
        return 0
        ;;
      "set-kubectl-cmd") #H: setups kubectl alternative command to use
        ent kubectl ent-set-cmd "$@"
        ;;
      "reset-kubectl-mode") #H: reset the kubectl mode to the default one
        reset_kubectl_mode
        ;;
      "status") #H: reset the kubectl mode to the default one
        print_ent_operative_infos
        ;;
      "list-kube-contexts")  #H: prints a list of available contexts from the current kubeconfig
        list_kube_contexts "$@"
        ;;
      "")
        # shellcheck disable=SC1091
        source ent help
        ;;
      --cmplt)
        cmplt
        ;;
      *)
        [ "$cmd" = "k" ] && cmd="kubectl"

        local mod_script="${ENTANDO_ENT_HOME}/bin/mod/ent-${cmd}"
        [ ! -f "$mod_script" ] && {
          _log_i 0 "Unrecognized ent command \"$cmd\""
          return 0
        }
        # shellcheck disable=SC1090
        source "$mod_script" "$@"
        ;;
    esac
    index_of_arg "--AND" "$@"
    if [ $? -eq 255 ]; then shift $#; else shift $?; fi
    [ -z "$1" ] && break
  done
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
which_ent() {
  echo "$ENTANDO_ENT_HOME"

  (
    echo ""
    echo "> More Info:"
    cd "$ENTANDO_ENT_HOME"
    echo "- CLI:"
    TAG="$(git describe --exact-match --tags)"
    echo "$ENTANDO_CLI_VERSION ($TAG)"
    git log --pretty=format:'%H|%ci' | head -n 1 | _perl_sed "s/\|/\n/g"
    echo "- REL:"
    cd "dist"
    TAG="$(git describe --exact-match --tags)"
    echo "$ENTANDO_VERSION ($TAG)"
    git log --pretty=format:'%H|%ci' | head -n 1 | _perl_sed "s/\|/\n/g"
  ) 1>&2
}

handle_config_command() {
  HH="$(parse_help_option "$@")"
  show_help_option "$HH"
  args_or_ask ${HH:+"$HH"} -f -- '--default///selects the default ent configuration' "$@" && {
    # shellcheck disable=SC2034
    CFG_FILE="$ENT_DEFAULT_CFG_FILE"
    ENT_WORK_DIR="$ENTANDO_ENT_HOME/w/"
    THIS_APP_PROFILE=""
  }

  args_or_ask ${HH:+"$HH"} -f -d -- '--print///print the configuration (default)' "$@" && {
    if [ -n "$THIS_APP_PROFILE" ]; then
      _log_i 0 "Configuration of the application profile \"$THIS_APP_PROFILE\"" 1>&2
    else
      _log_i 0 "Default configuration of the current ent installation" 1>&2
    fi
    cat "$ENT_WORK_DIR/.cfg"
  }
  args_or_ask ${HH:+"$HH"} -f -- '--edit///edits the configuration' "$@" && {
    _edit "$ENT_WORK_DIR/.cfg"
  }
  args_or_ask ${HH:+"$HH"} -f -- '--set///sets a specific configuration parameter' "$@" && {
    args_or_ask -a ${HH:+"$HH"} "CFG_KEY" "1///%sp the config key" "$@"
    args_or_ask -a -n ${HH:+"$HH"} "CFG_VALUE" "2///%sp the value to set" "$@"
    save_cfg_value "$CFG_KEY" "$CFG_VALUE"
  }
  args_or_ask ${HH:+"$HH"} -f -- '--get///gets a specific configuration parameter' "$@" && {
    args_or_ask -a ${HH:+"$HH"} "CFG_KEY" "1///%sp the config key" "$@"
    reload_cfg
    echo "${!CFG_KEY}"
  }
  [ -n "$HH" ] && exit 0
}

detach_vm() {
  rm "$ENT_KUBECONF_FILE_PATH"
  save_cfg_value "DESIGNATED_KUBECONFIG" ""
  save_cfg_value "DESIGNATED_VM" ""
  save_cfg_value "DESIGNATED_VM_NAMESPACE" ""
}

attach_vm() {
  args_or_ask -n -f -- '--help' "$@" && {
    local HH="--help"
    echo "> Parameters:"
  }

  args_or_ask_from_list REMOTES -m -a ${HH:+"$HH"} VM_NAME 1 "any" \
    "remotes" "%sp VM to which ent kubectl should attach" "$@"

  [ -n "$HH" ] && return 0

  local ADDR
  ADDR="$(multipass exec "$VM_NAME" -- hostname -I | awk '{print $1}')"
  [ -z "$ADDR" ] && FATAL "Unable to determine the VM address (\"$VM_NAME\")"

  (
    set -e
    [ -f "$ENT_KUBECONF_FILE_PATH" ] && rm "$ENT_KUBECONF_FILE_PATH"
    touch "$ENT_KUBECONF_FILE_PATH"
    chmod 600 "$ENT_KUBECONF_FILE_PATH"
    chmod u=rw,go= "$ENT_KUBECONF_FILE_PATH"
  ) || FATAL "Unable to prepare to KUBECONFIG file"

  multipass exec "$VM_NAME" -- bash -c "sudo cat /etc/rancher/k3s/k3s.yaml" \
    | _perl_sed "s/127.0.0.1/$ADDR/" >> "$ENT_KUBECONF_FILE_PATH"
    
  reset_kubectl_mode
  save_cfg_value "DESIGNATED_KUBECONFIG" "$ENT_KUBECONF_FILE_PATH"
  save_cfg_value "DESIGNATED_VM" "$VM_NAME"
}

cmplt() {
  cd "$ENTANDO_ENT_HOME/bin/mod" || {
    echo "Unable to enter directory $PWD/bin"
    exit 99
  }
  for file in ent-*; do
    mod="${file//ent-/}"
    echo "$mod"
  done

  local topcmd+=(
    "attach-vm" "detach-vm" "fix-vm-ddns" "completion" "config" "which" "import" "activate"
      "set-kubectl-cmd" "reset-kubectl-mode" "status" "list-kube-contexts"
  )

  for tc in "${topcmd[@]}"; do
    echo "$tc"
  done
}

# ######################################################################################################################
# ######################################################################################################################
# ######################################################################################################################

if (
 [[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] ||
 [[ -n $KSH_VERSION && $(cd "$(dirname -- "$0")" &&
    printf '%s' "${PWD%/}/")$(basename -- "$0") != "${.sh.file}" ]] ||
 [[ -n $BASH_VERSION ]] && (return 0 2>/dev/null)
); then
  ENTANDO_ENT_TMPFILE_0002bb75="$(mktemp /tmp/ent-runner-XXXXXXXX)"
  ENTANDO_ENT_TMPVAR_0002bb75=0
  case "${1}" in
    "activate")
      "$ENTANDO_ENT_HOME/bin/mod/ent-ent" --for-sourced-execution "$ENTANDO_ENT_TMPFILE_0002bb75" "$@"
      ENTANDO_ENT_TMPVAR_0002bb75="$?"
      ;;
    "help")
      shift
      "$ENTANDO_ENT_HOME/bin/mod/ent-help" "$@"
      ;;
  *)
    [ -f "$ENTANDO_ENT_TMPFILE_0002bb75" ] && rm "$ENTANDO_ENT_TMPFILE_0002bb75"
    echo "Sourced execution is not permitted for the command $1" 1>&2
    return 99
    ;;
  esac

  [ -f "$ENTANDO_ENT_TMPFILE_0002bb75" ] && {
    if [ "$ENTANDO_ENT_TMPVAR_0002bb75" = 0 ]; then
      # shellcheck disable=SC1090
      . "$ENTANDO_ENT_TMPFILE_0002bb75"
      rm "$ENTANDO_ENT_TMPFILE_0002bb75"
    fi
  }

  unset ENTANDO_ENT_TMPFILE_0002bb75
  exit "$ENTANDO_ENT_TMPVAR_0002bb75"
else
  # shellcheck disable=SC2034
  ENTANDO_CALLER_PWD="$PWD"
fi

upgrade_project_file() {
  local N=$1
  local O=$2
  if [ -f "$O" ]; then
    mkdir -p "$C_ENT_PRJ_ENT_DIR"
    if [ -f "$N" ]; then
      mv "$O" "$C_ENT_PRJ_ENT_DIR/$O.backup"
    else
      mv "$O" "$N"
    fi 
  fi
}

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
cd "$DIR/.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

if [[ "$1" == "--help" || "$1" == "" ]]; then
  . s/essentials.sh
  print_ent_module_help "${BASH_SOURCE[0]}" "$2"
  exit 0
fi

[ "$1" = "--cmplt" ] && {
  cmplt
  exit 0
}

. s/_base.sh
cd - > /dev/null || FATAL -t "internal error"

RUN "$@"
