#!/bin/bash

#H::
#H:: The Entando Command Line
#H::
#H:: Syntax:
#H::  - ent {command} {sub-command} {params}
#H::
#H:: Built-in Scripts:

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RUN() {
  local HH
  upgrade_project_file "$C_ENT_PRJ_FILE" "$C_ENT_OLD_PRJ_FILE"
  reload_cfg "$C_ENT_PRJ_FILE"
  upgrade_project_file "$C_ENT_STATE_FILE" "$C_ENT_OLD_STATE_FILE"
  reload_cfg "$C_ENT_STATE_FILE"
  
  [[ "$1" =~ --profile=.* ]] && shift

  while true; do
    cmd="$1"
    shift
    case "$cmd" in
      "which") #H: shows the location of the current ent
        which_ent
        ;;
      "activate") #H: activates one of the installed ents
        "${ENTANDO_ENT_HOME}/bin/mod/ent-ent" activate "$@" # see the other call for the source-execution
        ;;
      "import") #H: imports configuration and library from another compatible ENT installation
        import_ent_installation
        ;;
      "config") #H: [--edit] -- helps dealing with ent configurations
        handle_config_command "$@"
        ;;
      "namespace") #H: sets the namespace 
        handle_status_config ENTANDO_NAMESPACE "$@"
        ;;
      "appver") #H: sets the version assumed for the application
        handle_status_config ENTANDO_APPVER "$@"
        ;;
      "appname") #H: sets the default application names
        handle_status_config ENTANDO_APPNAME "$@"
        ;;
      "profile"|"P"|"pro") #H: helps creating and managing profiles
        # shellcheck disable=SC1090
        source "$ENTANDO_ENT_HOME/bin/mod/ent-profile" "$@"
        ;;
      "attach-vm") #H: [vm-name] -- attach ent to a ent-managed VM
        managed-vm-attach "$@"
        ;;
      "detach-vm") #H: detach ent from the current ent-managed VM
        managed-vm-detach "$@"
        ;;
      "attach-kubeconfig")  #H: attaches ent a kube configuration
        kubeconfig-attach "$@"
        ;;
      "detach-kubeconfig")  #H: attaches ent a kube configuration
        kubeconfig-detach "$@"
        ;;
      "attach-kubectx")  #H: attaches ent a kube configuration
        ent profile link "$@"
        ;;
      "detach-kubectx")  #H: attaches ent a kube configuration
        kubectx-detach
        ;;
      "list-kubectx")  #H: prints a list of available contexts from the current kubeconfig
        kubectx-list "$@"
        ;;
      "fix-vm-ddns") #H: fixes the domain name in a dynamic DNS nip.io setup (--simple in quickstart)
        # shellcheck disable=SC1091
        source ent host "$cmd" "$@"
        ;;
      "commands") #H: shows other ent top level commands
        # shellcheck disable=SC1091
        source ent help --simple
        ;;
      "print-completion-setup")
        ent completion "$@";;
      "completion") #H: setups the ent autocompletion
        [ -z "$1" ] && FATAL "Please provide the shell type (bash|zsh)"
        if [ "$1" = "zsh" ]; then
          echo "source \"$ENTANDO_ENT_HOME/s/completion.zsh\""
        elif [ "$1" = "bash" ]; then
          echo "source \"$ENTANDO_ENT_HOME/s/completion.sh\""
        else
          FATAL "Unsupported shell"
        fi
        return 0
        ;;
      "kubectl-cmd") #H: setups kubectl alternative command to use
        handle_kubectl_cmd "$@"
        ;;
      "reset-kubectl-mode") #H: reset the kubectl mode to the default one
        kubectl_mode --reset-cfg
        ;;
      "status") #H: shows the ent general status
        print_ent_general_status
        ;;
      "")
        # shellcheck disable=SC1091
        source ent help
        ;;
      --cmplt)
        cmplt
        ;;
      *)
        [ "$cmd" = "k" ] && cmd="kubectl"

        local mod_script="${ENTANDO_ENT_HOME}/bin/mod/ent-${cmd}"
        [ ! -f "$mod_script" ] && {
          _log_i 0 "Unrecognized ent command \"$cmd\""
          return 0
        }
        # shellcheck disable=SC1090
        source "$mod_script" "$@"
        ;;
    esac
    index_of_arg "--AND" "$@"
    if [ $? -eq 255 ]; then shift $#; else shift $?; fi
    [ -z "$1" ] && break
  done
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
which_ent() {
  echo "$ENTANDO_ENT_HOME"
  echo "${DEFAULT_ENTANDO_RELEASE:--}"
  
  (
    echo ""
    echo "> More Info:"
    cd "$ENTANDO_ENT_HOME" || FATAL "Unable to enter the cli directory"
    echo "- CLI:"
    TAG="$(git describe --exact-match --tags)"
    echo "$ENTANDO_CLI_VERSION ($TAG)"
    git log --pretty=format:'%H|%ci' | head -n 1 | _perl_sed "s/\|/\n/g"
    echo "- REL:"
    [ -z "$DEFAULT_ENTANDO_RELEASE" ] && {
      _log_i 0 "Default DEFAULT_ENTANDO_RELEASE is undefined"
      exit
    }
    cd "$ENTANDO_ENT_HOME/../../rel/$DEFAULT_ENTANDO_RELEASE" || FATAL "Unable to enter the release directory"
    TAG="$(git describe --exact-match --tags)"
    echo "$ENTANDO_VERSION ($TAG)"
    git log --pretty=format:'%H|%ci' | head -n 1 | _perl_sed "s/\|/\n/g"
  ) 1>&2
}

handle_config_command() {
  HH="$(parse_help_option "$@")"
  show_help_option "$HH"
  args_or_ask ${HH:+"$HH"} -f -- '--default///selects the default ent configuration' "$@" && {
    # shellcheck disable=SC2034
    CFG_FILE="$ENT_DEFAULT_CFG_FILE"
    ENT_WORK_DIR="$ENTANDO_ENT_HOME/w/"
    THIS_PROFILE=""
  }

  args_or_ask ${HH:+"$HH"} -f -d -- '--print///print the configuration (default)' "$@" && {
    if [ -n "$THIS_PROFILE" ]; then
      _log_i 0 "Configuration of the profile \"$THIS_PROFILE\"" 1>&2
    else
      _log_i 0 "Default configuration of the current ent installation" 1>&2
    fi
    cat "$ENT_WORK_DIR/.cfg"
  }
  args_or_ask ${HH:+"$HH"} -f -- '--edit///edits the configuration' "$@" && {
    _edit "$ENT_WORK_DIR/.cfg"
  }
  args_or_ask ${HH:+"$HH"} -f -- '--set///sets a specific configuration parameter' "$@" && {
    args_or_ask -a ${HH:+"$HH"} "CFG_KEY" "1///%sp the config key" "$@"
    args_or_ask -a -n ${HH:+"$HH"} "CFG_VALUE" "2///%sp the value to set" "$@"
    save_cfg_value "$CFG_KEY" "$CFG_VALUE"
  }
  args_or_ask ${HH:+"$HH"} -f -- '--get///gets a specific configuration parameter' "$@" && {
    args_or_ask -a ${HH:+"$HH"} "CFG_KEY" "1///%sp the config key" "$@"
    reload_cfg
    echo "${!CFG_KEY}"
  }
  [ -n "$HH" ] && exit 0
}

cmplt() {
  cd "$ENTANDO_ENT_HOME/bin/mod" || {
    echo "Unable to enter directory $PWD/bin"
    exit 99
  }
  for file in ent-*; do
    mod="${file//ent-/}"
    echo "$mod"
  done

  local topcmd+=(
    "attach-vm" "detach-vm" "fix-vm-ddns" "completion" "config" "which" "import" "activate"
      "set-kubectl-cmd" "reset-kubectl-mode" "status"
      "attach-kubeconfig" "detach-kubeconfig"
      "attach-kubectx" "detach-kubectx" "list-kubectx"
  )

  for tc in "${topcmd[@]}"; do
    echo "$tc"
  done
}

# ######################################################################################################################
# ######################################################################################################################
# ######################################################################################################################

if (
 [[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] ||
 [[ -n $KSH_VERSION && $(cd "$(dirname -- "$0")" &&
    printf '%s' "${PWD%/}/")$(basename -- "$0") != "${.sh.file}" ]] ||
 [[ -n $BASH_VERSION ]] && (return 0 2>/dev/null)
); then
  ENTANDO_ENT_TMPFILE_0002bb75="$(mktemp /tmp/ent-runner-XXXXXXXX)"
  ENTANDO_ENT_TMPVAR_0002bb75=0
  case "${1}" in
    "activate")
      "$ENTANDO_ENT_HOME/bin/mod/ent-ent" --for-sourced-execution "$ENTANDO_ENT_TMPFILE_0002bb75" "$@"
      ENTANDO_ENT_TMPVAR_0002bb75="$?"
      ;;
    "profile")
      if [ "$2" = "use" ]; then
        shift 2
        "$ENTANDO_ENT_HOME/bin/mod/ent-profile" --for-sourced-execution "$ENTANDO_ENT_TMPFILE_0002bb75" use "$@"
      else
        rm "$ENTANDO_ENT_TMPFILE_0002bb75"
      fi
      ;;
    "help")
      shift
      "$ENTANDO_ENT_HOME/bin/mod/ent-help" "$@"
      ;;
    *)
      rm "$ENTANDO_ENT_TMPFILE_0002bb75"
      ;;
  esac
  
  if [ ! -f "$ENTANDO_ENT_TMPFILE_0002bb75" ]; then 
    echo "Sourced execution is not permitted for the command $1" 1>&2
    return 99
  fi

  [ -f "$ENTANDO_ENT_TMPFILE_0002bb75" ] && {
    if [ "$ENTANDO_ENT_TMPVAR_0002bb75" = 0 ]; then
      # shellcheck disable=SC1090
      . "$ENTANDO_ENT_TMPFILE_0002bb75"
      rm "$ENTANDO_ENT_TMPFILE_0002bb75"
    fi
  }

  unset ENTANDO_ENT_TMPFILE_0002bb75
  return "$ENTANDO_ENT_TMPVAR_0002bb75"
else
  # shellcheck disable=SC2034
  ENTANDO_CALLER_PWD="$PWD"
fi

upgrade_project_file() {
  local N=$1
  local O=$2
  if [ -f "$O" ]; then
    mkdir -p "$C_ENT_PRJ_ENT_DIR"
    if [ -f "$N" ]; then
      mv "$O" "$C_ENT_PRJ_ENT_DIR/$O.backup"
    else
      mv "$O" "$N"
    fi 
  fi
}

handle_status_config() {
  if [ "$V"  = "--del" ]; then
    ent config --set ""
  else
    V="$2"
    [ "$V" == "--" ] && V="$3"
    if [ "$V"  = "" ]; then
      ent config --get "$1"
    else
      ent config --set "$1" "$V"
    fi
  fi
}

handle_kubectl_cmd() {
  if [ "$1"  = "" ]; then
    ent config --get "ENT_KUBECTL_CMD"
  else
    ent kubectl ent-set-cmd "$@"
  fi
}

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
cd "$DIR/.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

if [[ "$1" == "--help" || "$1" == "" ]]; then
  . s/essentials.sh
  print_ent_module_help "${BASH_SOURCE[0]}" "$2"
  exit 0
fi

[ "$1" = "--cmplt" ] && {
  cmplt
  exit 0
}

. s/_base.sh
cd - > /dev/null || FATAL -t "internal error"

RUN "$@"
