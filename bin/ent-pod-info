#!/bin/bash

[ "$1" = "-h" ] && echo -e "Displays infomations related to a set of pods | Syntax: ${0##*/} namespace pod-name-pattern" && exit 0

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
cd "$DIR/.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

. s/_base.sh

args_or_ask -n -f '--help' "$@" && {
  HH="-h"
  echo "> Parameters:"
}

args_or_ask  $HH ENTANDO_NAMESPACE "--namespace/ext_id//%sp provide the namespace" "$@"
args_or_ask  $HH -n POD_PATT '--pod-patt/any?//%sp the pod filter pattern' "$@"
args_or_ask  $HH -n LOG_PATT '--log-patt/any?//%sp the log filter pattern' "$@"

[ -n "$HH" ] && return 0

_kubectl-pre-sudo

for pod in $(_kubectl get pods -n "$ENTANDO_NAMESPACE" | awk 'NR>1' | awk '{print $1}' | grep -- "$POD_PATT"); do
  echo -e "\n====================================================================================================" 1>&2
  echo "> POD: $pod" 1>&2
  if [ -z "$LOG_PATT" ]; then
    _kubectl describe pods/"$pod" -n "$ENTANDO_NAMESPACE"
  fi
  for co in $(_kubectl get pods/"$pod" -o jsonpath='{.spec.containers[*].name}{"\n"}' -n "$ENTANDO_NAMESPACE"); do
    echo -e "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" 1>&2
    echo -e "> CONTAINER: $pod/$co" 1>&2
    echo -e ""
    if [ -n "$LOG_PATT" ]; then
      _kubectl logs pods/"$pod" -c "$co" -n "$ENTANDO_NAMESPACE" | grep -i -E "$LOG_PATT" --color
    else
      _kubectl logs pods/"$pod" -c "$co" -n "$ENTANDO_NAMESPACE"
    fi
  done
  echo ""
done
