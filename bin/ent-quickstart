#!/bin/bash

[ "$1" = "-h" ] && echo -e "Automatically execute the quickstart deployment | Syntax: ${0##*/} options" && exit 0

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
cd "$DIR/.." || {
  echo "Internal error: unable to find the script source dir" 1>&2
  exit
}

# shellcheck disable=SC2120
debug_trace_vars() {
  if [[ "$ENTANDO_DEBUG" -gt 0 || "$1" == "-f" ]]; then
    trace_vars \
      AUTO_ADD_ADDR ADDR VM_OPT WITH_HOSTNAME \
      ENTANDO_DEBUG ENTANDO_RELEASE ENTANDO_CLI_VERSION WITH_VM ENTANDO_OPT_YES_FOR_ALL \
      JUST_SET_CFG ENTANDO_NAMESPACE ENTANDO_APPNAME \
      ENTANDO_VM_NAME ENTANDO_VM_CPU ENTANDO_VM_MEM ENTANDO_VM_DISK
  fi
}

#-----------------------------------------------------------------------------------------------------------------------
. s/_base.sh

print_entando_banner

echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "~ STARTING QUICKSTART"
echo "~ NAME OF THIS HOST: $(hostname)"
echo "~ ARGUMENTS: $*"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

#-----------------------------------------------------------------------------------------------------------------------
args_or_ask -n -f '--help' "$@" && {
  HH="-h"
  echo -e "\n> Parameters:"
}

args_or_ask $HH -n -a "ENTANDO_NAMESPACE" "1/id//The namespace" "$@" || FATAL "Please provide the namespace"
args_or_ask $HH -n -a "ENTANDO_APPNAME" "2/id//The application name" "$@" || FATAL "Please provide the app name"
args_or_ask $HH -n -p "ENTANDO_RELEASE" "--release//$C_QUICKSTART_DEFAULT_RELEASE/the version tag of the release" "$@"
args_or_ask $HH -n -p "ENTANDO_CLI_VERSION" "--cli-version///the version tag of CLI" "$@"
args_or_ask $HH -n "ENTANDO_DEBUG" "--debug/num/0/if set to 1 shows debug informations" "$@"
args_or_ask $HH -n -F "WITH_VM" "--with-vm///starts in a VM instead of natively" "$@"
args_or_ask $HH -n -F "ENTANDO_OPT_YES_FOR_ALL" "--yes///Assumes yes for all yes-no questions" "$@"
args_or_ask $HH -n "ENTANDO_VM_NAME" "--vm-name//$ENTANDO_NAMESPACE/The name of the VM (defaults to the namespace name)" "$@"
args_or_ask $HH -n "ENTANDO_VM_CPU" "--vm-cpu///Number of CPUs" "$@"
args_or_ask $HH -n "ENTANDO_VM_MEM" "--vm-mem/giga//VM memory, ex: 8G" "$@"
args_or_ask $HH -n "ENTANDO_VM_DISK" "--vm-disk/giga//Disk space: ex: 12G" "$@"

[ -n "$HH" ] && echo "" && exit 0

args_or_ask $HH -n -F "ENTANDO_NO_CHECK" "--no-check" "$@"
args_or_ask $HH -n -F "ENTANDO_NO_AUTO_ATTACH" "--no-auto-attach" "$@"
args_or_ask $HH -n -F "JUST_SET_CFG" "--config" "$@"

args_or_ask -f "--destroy" "$@" && {
  reload_cfg
  prepare_for_sudo
  ask "Should I destroy namespace \"$ENTANDO_NAMESPACE\" and contained app \"$ENTANDO_APPNAME\" ?" && {
    _kubectl delete namespace "$ENTANDO_NAMESPACE"
  }
  exit
}

#-----------------------------------------------------------------------------------------------------------------------

debug_trace_vars

if [ "$ENTANDO_RELEASE" != "$C_QUICKSTART_DEFAULT_RELEASE" ]; then
  assert_ver "ENTANDO_RELEASE" "$ENTANDO_RELEASE" || FATAL "Please provide a valid release tag"
fi

WITH_HOSTNAME=false
FOUND=false

! $JUST_SET_CFG && {
  # HOSTNAME MODE ----
  args_or_ask -n -p "ADDR" "--hostname/fdn?" "$@" && {
    if [ -n "$ADDR" ]; then
      FOUND=true
    else
      if $OS_WIN && $WITH_VM && [ -n "$ENTANDO_VM_NAME" ]; then
        # OS_WIN: derive the hostname from the
        ADDR="$ENTANDO_VM_NAME.$C_WIN_VM_HOSTNAME_SUFFIX"
        _log_i 0 "Assuming hostname name: \"$ADDR\""
        assert_fdn "HOSTNAME" "$ADDR"
        FOUND=true
      else
        FATAL "Please provide an hostname"
      fi
    fi

    WITH_HOSTNAME=true
    if $WITH_VM; then
      VM_OPT="--hostname=\"$ADDR\""
    fi
  }
#-----------------------------------------------------------------------------------------------------------------------

  # SIMPLE MODE ----
  args_or_ask -n -p "ADDR" "--simple/ip?" "$@" && {
    FOUND=true
    AUTO_ADD_ADDR=false
    if $WITH_VM; then
      if [ -n "$ADDR" ]; then
        VM_OPT="--simple=\"$ADDR\""
      else
        VM_OPT="--simple"
      fi
    else
      [[ -z "$ADDR" ]] && ADDR="$(hostname -I | awk '{print $1}')"
    fi
  }

  # CUSTOM MODE ----
  args_or_ask -n -p "ADDR" "--custom/ip?" "$@" && {
    FOUND=true
    AUTO_ADD_ADDR=true
    [[ -z "$ADDR" ]] && {
      FATAL "Please provide the custom ip address"
    }
    VM_OPT="--custom=\"$ADDR\""
  }
}

! $FOUND && {
  echo -e "Please provide a valid address mode option:" 1>&2
  echo "  --simple=[ADDR]    => standard installation with an existing ip" 1>&2
  echo "  --hostname=[FQDN]  => standard installation with an existing fully qualified domain name" 1>&2
  echo "  --custom=[ADDR]    => automatically adds an IP on the OS (only netplan)" 1>&2
  echo "" 1>&2
  echo "NOTE: if \"ADDR\" is not provided one is automatically determined" 1>&2
  echo "" 1>&2
  exit 1
}

save_cfg_value "ENTANDO_NAMESPACE" "$ENTANDO_NAMESPACE"
save_cfg_value "ENTANDO_APPNAME" "$ENTANDO_APPNAME"

if $WITH_HOSTNAME; then
  save_cfg_value "ENTANDO_SUFFIX" "$ADDR"
else
  save_cfg_value "ENTANDO_SUFFIX" "$ADDR.nip.io"
fi

$JUST_SET_CFG && echo "Config has been written" && exit 0

#-----------------------------------------------------------------------------------------------------------------------
# WITH-VM

RUN_WITH_VM() {
  [ -z "$ENTANDO_VM_CPU" ] && ENTANDO_VM_CPU="4"
  [ -z "$ENTANDO_VM_MEM" ] && ENTANDO_VM_MEM="8G"
  [ -z "$ENTANDO_VM_DISK" ] && ENTANDO_VM_DISK="12G"

  [ "$ENTANDO_DEBUG" -gt 0 ] && VM_OPT+=" --debug=$ENTANDO_DEBUG"
  $ENTANDO_OPT_YES_FOR_ALL && VM_OPT+=" --yes"

  #~
  _log_i 2 "> Generating the base VM"
  multipass launch --name "$ENTANDO_VM_NAME" --cpus "$ENTANDO_VM_CPU" --mem "$ENTANDO_VM_MEM" --disk "$ENTANDO_VM_DISK"

  #~
  _log_i 2 "> Installing Ent on the VM"
  multipass exec "$ENTANDO_VM_NAME" -- bash -c "
    bash <(curl \"https://raw.githubusercontent.com/entando/entando-cli/$ENTANDO_CLI_VERSION/auto-install\") \
      --release=\"$ENTANDO_RELEASE\" --cli-version=\"$ENTANDO_CLI_VERSION\"
    "

  _log_i 2 "> Checking the environment"
  if ! $ENTANDO_NO_CHECK; then
    if $WITH_HOSTNAME; then
      multipass exec "$ENTANDO_VM_NAME" -- bash -c "ent-check-env runtime --no-dns-fix"
    else
      multipass exec "$ENTANDO_VM_NAME" -- bash -c "ent-check-env runtime"
    fi
  fi

  remotes-set "$ENTANDO_VM_NAME" "$ENTANDO_NAMESPACE/$ENTANDO_APPNAME/$ENTANDO_RELEASE"

  _log_i 2 "> Registering the VM"
  ! $ENTANDO_NO_AUTO_ATTACH && {
    ent attach "$ENTANDO_VM_NAME"
  }

  multipass exec "$ENTANDO_VM_NAME" -- bash -c "
    cd \
    && source \".entando/ent/$ENTANDO_RELEASE/cli/$ENTANDO_CLI_VERSION/activate\" \
    && ent-quickstart $VM_OPT \"$ENTANDO_NAMESPACE\" \"$ENTANDO_APPNAME\" \
         --release=\"$ENTANDO_RELEASE\" --cli-version=\"$ENTANDO_CLI_VERSION\"
    "


  exit 0
}

#-----------------------------------------------------------------------------------------------------------------------
# DIRECT

RUN_DIRECT() {
  _log_i 2 "> Checking environment"

  ! $JUST_SET_CFG && ! $ENTANDO_NO_CHECK && {
    if $WITH_HOSTNAME; then
      . bin/ent-check-env runtime --no-dns-fix
    else
      . bin/ent-check-env runtime
    fi
  }

  [ -f ~/.bashrc ] && . ~/.bashrc
  setup_kubectl

  _log_i 2 "> Generating the kubernetes specification file for the deployment"

  if ! $WITH_HOSTNAME; then
    $AUTO_ADD_ADDR && {
      net_is_address_present "$ADDR" || {
        netplan_add_custom_ip "$ADDR/24"
        sudo netplan generate
        sudo netplan apply
        sleep 1
      }
    }

    net_is_address_present "$ADDR" || {
      FATAL "The designated ip address is not present on the system"
    }

    FQADDR="$ADDR.nip.io"
    SINGLE_HOSTNAME="~"

    _log_d 5 "> Using ip address: $ADDR"
  else
    FQADDR="$ADDR"
    SINGLE_HOSTNAME="$FQADDR"

    _log_d 5 "> Using domain: $ADDR"
  fi

  cat "dist/$DEPL_SPEC_YAML_FILE.tpl" \
    | _perl_sed "s/PLACEHOLDER_ENTANDO_NAMESPACE/$ENTANDO_NAMESPACE/" \
    | _perl_sed "s/PLACEHOLDER_ENTANDO_APPNAME/$ENTANDO_APPNAME/" \
    | _perl_sed "s/PLACEHOLDER_ENTANDO_SINGLE_HOSTNAME/$SINGLE_HOSTNAME/" \
    | _perl_sed "s/PLACEHOLDER_ENTANDO_DOMAIN_SUFFIX/$FQADDR/" \
      > "w/$DEPL_SPEC_YAML_FILE"

  _log_i 3 "File \"w/$DEPL_SPEC_YAML_FILE\" generated"

  ask "Should I register the CRDs?" && {
    _kubectl apply -f "dist/crd"
  }

  ask "Should I start the deployment?" && {
    _kubectl create namespace "$ENTANDO_NAMESPACE"
    _kubectl create -f "w/$DEPL_SPEC_YAML_FILE"
  }

  ask "Should I start the monitor?" && {
    ent-app-info watch || true
  } || {
    echo -e "\n~~~\nUse the command:\n  - ent-app-info.sh watch\nto check the status of the app"
  }
}

#-----------------------------------------------------------------------------------------------------------------------

prepare_for_sudo

if $WITH_VM; then
  RUN_WITH_VM
else
  RUN_DIRECT
fi
